-----------<WorldViusal LOCALS>

local IronColor = Color3.new(1, 1, 1)
local StoneColor = Color3.new(1, 1, 1)
local NitrateColor = Color3.new(1, 1, 1)
local PartBoxColor = Color3.new(1, 1, 1)
local VendingMachineColor = Color3.new(1, 1, 1)
local MetalCrateColor = Color3.new(1, 1, 1)
local maxDistance = 500

-----------<WorldViusal LOCALS>

-----------------------------------<ORESBLABLABLABLAORES>--------------------------------
local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
                local parent = part.Parent
                if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Iron Ore]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = IronColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.00000000001) -- Wait for a very short time before checking again
    end
end

local function IrontoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

IrontoggleAdornments()

------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Flint") and part.Material == Enum.Material.Limestone then
			local parent = part.Parent
			if parent and parent:IsA("Model") and #parent:GetChildren() == 1 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Stone Ore]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = StoneColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.0000000001) -- Wait for a very short time before checking again
    end
end

local function StonetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

StonetoggleAdornments()


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
             if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Nitrate Ore]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = NitrateColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.00000000000000001) -- Wait for 1 second before checking again
    end
end

local function NitratetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

NitratetoggleAdornments()


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Cashmere") and part.Material == Enum.Material.Plastic then
			local parent = part.Parent
			if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Part Box]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = PartBoxColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.0000000001) -- Wait for a very short time before checking again
    end
end

local function PartBoxtoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

PartBoxtoggleAdornments()


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Medium brown") and part.Material == Enum.Material.Plastic then
			local parent = part.Parent
			if parent and parent:IsA("Model") and #parent:GetChildren() == 12 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Vending Machine]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = VendingMachineColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.0000000001) -- Wait for a very short time before checking again
    end
end

local function VendingMachinetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

VendingMachinetoggleAdornments()




------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Silver flip/flop") and part.Material == Enum.Material.Metal then
			local parent = part.Parent
			if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Metal Crate]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = MetalCrateColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.0000000001) -- Wait for a very short time before checking again
    end
end

local function MetalCratetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

MetalCratetoggleAdornments()









local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Demontime [Trojan detected] [Ip logged]',
    Center = true,
    AutoShow = true,
    TabPadding = 0,
    MenuFadeTime = 0
})






------// LPH >--------------------------------

function LPH_JIT_ULTRA(f)
	return f
	end
	function LPH_JIT_MAX(f)
	return f
	end  

	if not LPH_OBFUSCATED then
		LPH_JIT = function(...) return ... end
		LPH_JIT_MAX = function(...) return ... end
		LPH_JIT_ULTRA = function(...) return ... end
		LPH_NO_VIRTUALIZE = function(...) return ... end
		LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
		LPH_ENCSTR = function(...) return ... end
		LPH_STRENC = function(...) return ... end
		LPH_HOOK_FIX = function(...) return ... end
		LPH_CRASH = function() return print(debug.traceback()) end
	end

------// LPH >--------------------------------


    
--< Bypasses >--------------------------------
	
	local antihitbox
	antihitbox = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Size" and self.Name == "Torso" then
		return 0.6530659198760986, 2.220424175262451, 1.4367451667785645
	end
	return antihitbox(...)
	end))
	local antixray
	antixray = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Hitbox" and self.Name == "Transparency" then
		return 1
	end
	return antixray(...)
	end))
	local mt = getrawmetatable(game)
	make_writeable(mt)
	local old_index = mt.__index
	mt.__index = function(a,b)
	if tostring(a) == "Workspace" then
		if tostring(b) == "Gravity" then
			return 75;
		end
	end
	return old_index(a, b)
end    

--< Bypasses >--------------------------------









local Tabs = {
    Main = Window:AddTab('Main'),
}

local TabBox = Tabs.Main:AddLeftTabbox()


-----------<HBE LOCALS>

local HeadExtends = false

local Radius = 6

local TargetOptions = {
    ["Head"] = "Head",
    ["Torso"] = "Torso",
}
local selectedTarget = TargetOptions["Head"]

local HBXColor = Color3.new(1, 1, 1)

local TargetMaterial = {
    ["Plastic"] = Enum.Material.Plastic, 
    ["Wood"] = Enum.Material.Wood,
    ["Slate"] = Enum.Material.Slate,
    ["Concrete"] = Enum.Material.Concrete,
    ["CorrodedMetal"] = Enum.Material.CorrodedMetal,
    ["DiamondPlate"] = Enum.Material.DiamondPlate,
    ["Foil"] = Enum.Material.Foil,
    ["Grass"] = Enum.Material.Grass,
    ["Ice"] = Enum.Material.Ice,
    ["Marble"] = Enum.Material.Marble,
    ["Granite"] = Enum.Material.Granite,
    ["Brick"] = Enum.Material.Brick,
    ["Pebble"] = Enum.Material.Pebble,
    ["Sand"] = Enum.Material.Sand,
    ["Fabric"] = Enum.Material.Fabric,
    ["SmoothPlastic"] = Enum.Material.SmoothPlastic,
    ["Metal"] = Enum.Material.Metal,
    ["WoodPlanks"] = Enum.Material.WoodPlanks,
    ["Neon"] = Enum.Material.Neon,
    ["Cobblestone"] = Enum.Material.Cobblestone,
    ["Glass"] = Enum.Material.Glass,
    ["Asphalt"] = Enum.Material.Asphalt,
    ["LeafyGrass"] = Enum.Material.LeafyGrass,
    ["Salt"] = Enum.Material.Salt,
    ["Limestone"] = Enum.Material.Limestone,
    ["Basalt"] = Enum.Material.Basalt,
    ["ForceField"] = Enum.Material.ForceField,
}
local selectedMaterial = TargetMaterial["ForceField"]

local TargetShape = {
    ["Ball"] = Enum.PartType.Ball, 
    ["Cube"] = Enum.PartType.Block,
    ["Cylinder"] = Enum.PartType.Cylinder,
}
local selectedShape = TargetShape["Ball"]

local HitboxTransparency = 0.5

local HBXH = false
local SizeX = 10
local SizeY = 10
local SizeZ = 10

-----------<HBE LOCALS>

-----------<HBE Function>

local HedsOn = Instance.new("Part")
HedsOn.Name = "HedsOn"
HedsOn.Anchored = false
HedsOn.CanCollide = false
HedsOn.Transparency = HitboxTransparency
HedsOn.Color = HBXColor
HedsOn.Material = selectedMaterial
HedsOn.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)  
HedsOn.Shape = selectedShape or Enum.PartType.Ball
HedsOn.Parent = game.ReplicatedStorage

task.spawn(function()
    while task.wait() do
        if HeadExtends then
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then                        	
                    local BigHeadsPart = Instance.new("Part")
                    BigHeadsPart.Name = selectedTarget
                    BigHeadsPart.Anchored = false
                    BigHeadsPart.CanCollide = false
                    BigHeadsPart.Transparency = HitboxTransparency
                    BigHeadsPart.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)
                    BigHeadsPart.Material = selectedMaterial or Enum.Material.ForceField
                    BigHeadsPart.Color = HBXColor
                    BigHeadsPart.Shape = selectedShape or Enum.PartType.Ball
                    
                
                    local DeletePart = Instance.new("Weld")
                    DeletePart.Parent = BigHeadsPart
                    DeletePart.Name = "FAKEHEAD"
                    
                    local HeadsParts = BigHeadsPart:Clone()
                    HeadsParts.Parent = i
                    HeadsParts.Orientation = i.HumanoidRootPart.Orientation
                    
                    local clonedHedsOn = HedsOn:Clone()
                    clonedHedsOn.Parent = i
                    
                    local Headswelding = Instance.new("Weld")
                    Headswelding.Parent = HeadsParts
                    Headswelding.Part0 = i.HumanoidRootPart
                    Headswelding.Part1 = HeadsParts
                    
                    HeadsParts.Position = i[selectedTarget].Position

                end
            end
        else
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
                    i.HedsOn:Remove()
                    for _, a in ipairs(i:GetChildren()) do
                      if (selectedTarget == "Head" or selectedTarget == "Torso") and a.Name == selectedTarget and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                            a:Remove()
                        end
                    end
                end
            end
        end
    end
end)

-----------<HBE Function>


local Tab1 = TabBox:AddTab('Hitbox Expander')

local EnableHBX = Tab1:AddToggle('Enable', {
    Text = 'Enable',
    Default = false, 
    Tooltip = 'Enable hitbox expander', 

    Callback = function(HBEON)
        HeadExtends = HBEON 
    end
})

EnableHBX:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Hitbox Color', 
    Transparency = 0, 

    Callback = function(HBECOLOR)
        HBXColor = Color3.new(HBECOLOR.r, HBECOLOR.g, HBECOLOR.b)
    end
})


Tab1:AddDropdown('TargetDropdown', {
    Values = { 'Head', 'Torso' },
    Default = 1,
    Multi = false, 

    Text = 'Part',
    Tooltip = 'Part on which will be expanded', 

    Callback = function(HBETRAGET)
        selectedTarget = TargetOptions[HBETRAGET]
    end
})

Tab1:AddDropdown('MaterialDropdown', {
    Values = { "ForceField", "Neon", "Plastic", "Metal", "Wood", "Slate", "Concrete", "Foil", "DiamondPlate", "CorrodedMetal", "Grass", "Ice", "Marble", "Granite", "Brick", "Pebble", "Sand", "Fabric", "SmoothPlastic", "WoodPlanks", "Cobblestone", "Glass", "Asphalt", "LeafyGrass", "Salt", "Limestone", "Basalt" },
    Default = 1, 
    Multi = false, 

    Text = 'Material',
    Tooltip = 'Material of the hitbox', 

    Callback = function(HBEMATERIAL)
        selectedMaterial = TargetMaterial[HBEMATERIAL]
    end
})

Tab1:AddDropdown('ShapeDropdown', {
    Values = { 'Ball', 'Cube', 'Cylinder' },
    Default = 1, 
    Multi = false, 

    Text = 'Shape',
    Tooltip = 'Shape of the hitbox', 

    Callback = function(HBESHAPE)
        selectedShape = TargetShape[HBESHAPE]
    end
})


Tab1:AddSlider('TransparencySlider', {
    Text = 'Transparency',
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 1,
    Compact = false,

    Callback = function(HBETRANS)
        HitboxTransparency = HBETRANS
    end
})


Tab1:AddSlider('HitboxSlider', {
    Text = 'Size',
    Default = 6,
    Min = 1,
    Max = 12,
    Rounding = 1,
    Compact = false,

    Callback = function(HBESIZE)
        Radius = HBESIZE
    end
})


local Tab2 = TabBox:AddTab('Head Expander')

Tab2:AddToggle('Enable', {
    Text = 'Enable',
    Default = false, 
    Tooltip = 'Enable head expander', 

    Callback = function(HBEON2)
        HBXH = HBEON2
        local function AdjustHeadSize(i)
            if i:FindFirstChild("HumanoidRootPart") then
                if HBXH then
                    i.Head.Size = Vector3.new(SizeX, SizeY, SizeZ)
                else
                    i.Head.Size = Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
                end
            end
        end
        
        workspace.ChildAdded:Connect(function(child)
            AdjustHeadSize(child)
        end)
        
        for _, existingChild in pairs(workspace:GetChildren()) do
            AdjustHeadSize(existingChild)
        end
    end
})

Tab2:AddSlider('HitboxSliderX', {
    Text = 'Size X',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = false,

    Callback = function(SX)
        SizeX = SX
    end
})

Tab2:AddSlider('HitboxSliderY', {
    Text = 'Size Y',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = false,

    Callback = function(SY)
        SizeY = SY
    end
})

Tab2:AddSlider('HitboxSliderZ', {
    Text = 'Size Z',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = false,

    Callback = function(SZ)
        SizeZ = SZ
    end
})



local TabBox2 = Tabs.Main:AddRightTabbox() 


-----------<Visual LOCALS>

local ArmorColor = Color3.new(0, 1, 0)
local SleeperColor = Color3.new(0, 0, 1)
local distanceview = 800
local WepsColor = Color3.new(1, 1, 1)
local wallcheck = false
local WallColor = Color3.new(1, 0, 0)
local PlayerText = " Player "

-----------<Viusal LOCALS>


local VTab1 = TabBox2:AddTab('Player Visuals')

local PlayerLOC = VTab1:AddToggle('Player', {
    Text = 'Player',
    Default = false, 
    Tooltip = 'Shows "Player" text esp', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function Playeresp(drop)
            local dropesp = Drawing.new("Text")
            dropesp.Visible = false
            dropesp.Center = true
            dropesp.Outline = true
            dropesp.Font = 2
            dropesp.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
                    
                    -- Calculate distance to humanoid
                    local distance = (drop.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
                    
                    if drop_onscreen and distance <= distanceview then
                        if wallcheck then
                            -- Raycast to check for obstructions
                            local raycastParams = RaycastParams.new()
                            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                            raycastParams.FilterDescendantsInstances = {drop}
                            local raycastResult = workspace:Raycast(
                                camera.CFrame.Position,
                                drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                raycastParams
                            )
                            
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = PlayerText
                            
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                if not raycastResult then
                                    dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                else
                                    dropesp.Color = WallColor -- Red color for obstructed players
                                end
                            end
                        else
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = PlayerText
                            
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                dropesp.Color = ArmorColor -- Green color for players
                            end
                        end
                        
                        dropesp.Visible = true
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                    dropesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for i, drop in next, workspace:GetChildren() do
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end
        
        workspace.ChildAdded:Connect(function(drop)
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end)
    end
})


local HighlightLOC = VTab1:AddToggle('Highlight', {
    Text = 'Highlight',
    Default = false, 
    Tooltip = 'Show players in highlight', 

    Callback = function(Value)
        if true then
            while true do
               wait(1)
               for i, a in ipairs(workspace:GetChildren()) do
                  if a:FindFirstChild("HumanoidRootPart") then
                     if not a:FindFirstChild("Chamse") then
                        if a ~= game:GetService("Workspace").Ignore.FPSArms then
                           local b = Instance.new("Highlight", a)
                           b.Adornee = a
                           b.Name = "Chamse"
                           b.FillColor = Color3.fromRGB(25,25,25)
                           b.DepthMode = "AlwaysOnTop"
                           b.FillTransparency = 1
                           b.OutlineTransparency = 0  
                           b.OutlineColor = Color3.fromRGB(255,255,255)
                        end
                     end
                  end
               end
            end
            end
    end
})



local ArmorLOC = VTab1:AddToggle('Armor', {
    Text = 'Armor',
    Default = false, 
    Tooltip = 'Show players armors', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")

        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function espArmor(drop)
            local armorNameLabel = Drawing.new("Text")
            armorNameLabel.Visible = false
            armorNameLabel.Center = true
            armorNameLabel.Outline = true
            armorNameLabel.Font = 2
            armorNameLabel.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            local armorFolder = drop.Armor and drop.Armor:FindFirstChildOfClass("Folder")
                            if armorFolder then
                                local armorName = armorFolder.Name
                                if armorName == "WoodHelmet" or armorName == "WoodChestplate" or armorName == "WoodLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[WoodArmor]"
                                elseif armorName == "RiotHelmet" or armorName == "RiotChestplate" or armorName == "RiotLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[RiotArmor]"
                                elseif armorName == "SteelHelmet" or armorName == "SteelChestplate" or armorName == "SteelLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[SteelArmor]"
                                elseif armorName == "IronHelmet" or armorName == "IronChestplate" or armorName == "IronLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[IronArmor]"
                                else
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[None]"
                                end
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = {drop}
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
                                        
                                        if not raycastResult then
                                            armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
                                
                                armorNameLabel.Visible = true
                            else
                                armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                armorNameLabel.Text = "[None]"
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = {drop}
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
                                        
                                        if not raycastResult then
                                            armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
                                
                                armorNameLabel.Visible = true
                            end
                        else
                            armorNameLabel.Visible = false
                        end
                    else
                        armorNameLabel.Visible = false
                    end
                else
                    armorNameLabel.Visible = false
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end)
    end
})


local WeaponLOC = VTab1:AddToggle('Weapon', {
    Text = 'Weapon',
    Default = false, 
    Tooltip = 'Show players weapons', 

    Callback = function(Value)
        local function applyItemESP(itemName)
            local function createESP(item, itemName)
               local a = Instance.new("BillboardGui", item)
               a.Name = "ItemESP"
               a.Size = UDim2.new(0, 100, 0, 20)  -- Adjust the size to fit the text comfortably
               a.AlwaysOnTop = true
               a.StudsOffset = Vector3.new(5, 5, 0)  -- Adjust the Y offset to move the ESP higher
         
               local b = Instance.new("Frame", a)
               b.Size = UDim2.new(1, 0, 1, 0)
               b.BackgroundTransparency = 1  -- Adjust transparency for a softer look
               b.BackgroundColor3 = Color3.new(0, 0.5, 0)  -- Dark green color
         
               local c = Instance.new('TextLabel', b)
               c.Size = UDim2.new(1, 0, 1, 0)
               c.BackgroundTransparency = 1
               c.TextSize = 20  -- Slightly smaller text size
               c.Font = Enum.Font.Arial  -- Apply Gotham font
               c.TextColor3 = WepsColor  -- White text color
               c.TextStrokeTransparency = 0.5
               c.TextStrokeColor3 = Color3.new(0, 0, 0)  -- Black text stroke
               c.Text = itemName
            end
         
            for _, v in pairs(game.workspace:GetDescendants()) do
               if v.Name == itemName then
                  createESP(v, itemName)
               end
            end
         
            game.workspace.DescendantAdded:Connect(function(item)
               if item.Name == itemName then
                  createESP(item, itemName)
               end
            end)
         end
         
         local itemsToApplyESP = {
            "Bow",
            "PipePistol",
            "Crossbow",
            "PipeSMG",
            "Blunderbuss",
            "USP9",
            "M4A1",
            "SteelHammer",
            "StoneHammer",
            "Hammer",
            "SCAR",
            "IronHammer",
            "RPG",
            "PumpShotgun",
            "MiningDrill",
            "LeverActionRifle",
            "HMAR",
            "GaussRifle",
            "FlameThrower",
            "Crowbar"
         }
         
         for _, itemName in ipairs(itemsToApplyESP) do
            applyItemESP(itemName)
         end
    end
})


local DistanceLOC = VTab1:AddToggle('Distance', {
    Text = 'Distance',
    Default = false, 
    Tooltip = 'Show players distance', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function espDistance(drop)
            local dropesp = Drawing.new("Text")
            dropesp.Visible = false
            dropesp.Center = true
            dropesp.Outline = true
            dropesp.Font = 2
            dropesp.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            if wallcheck then
                                -- Raycast to check for obstructions
                                local raycastParams = RaycastParams.new()
                                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                raycastParams.FilterDescendantsInstances = {drop}
                                local raycastResult = workspace:Raycast(
                                    camera.CFrame.Position,
                                    drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                    raycastParams
                                )
                                
                                dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - -15) -- Adjusted position with a 15-pixel offset above
                                dropesp.Text = string.format("[ %.1f studs ]", distance)
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    dropesp.Color = SleeperColor -- Green color for sleeping players
                                else
                                    if not raycastResult then
                                        dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    else
                                        dropesp.Color = WallColor -- Red color for obstructed players
                                    end
                                end
                                
                                dropesp.Visible = true
                            else
                                dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - -15) -- Adjusted position with a 15-pixel offset above
                                dropesp.Text = string.format("[ %.1f studs ]", distance)
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    dropesp.Color = SleeperColor -- Green color for sleeping players
                                else
                                    dropesp.Color = ArmorColor -- Default color for awake players
                                end
                                
                                dropesp.Visible = true
                            end
                        else
                            dropesp.Visible = false
                        end
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                    dropesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for i, drop in ipairs(workspace:GetChildren()) do
            if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
                espDistance(drop)
            end
        end
        
        workspace.ChildAdded:Connect(function(drop)
            if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
                espDistance(drop)
            end
        end)
    end
})



local LineLOC = VTab1:AddToggle('Snapline', {
    Text = 'Snapline',
    Default = false, 
    Tooltip = 'Adds snaplines on players', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        

        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function esp(drop)
            local lineesp = Drawing.new("Line")
            lineesp.Visible = false
            lineesp.From = Vector2.new(0, 0)
            lineesp.To = Vector2.new(0, 0)
            lineesp.Thickness = 2
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:IsDescendantOf(workspace) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            if wallcheck then
                                -- Raycast to check for obstructions
                                local raycastParams = RaycastParams.new()
                                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                raycastParams.FilterDescendantsInstances = {drop}
                                local raycastResult = workspace:Raycast(
                                    camera.CFrame.Position,
                                    drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                    raycastParams
                                )
                                
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    if not raycastResult then
                                        lineesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    else
                                        lineesp.Color = WallColor -- Red color for obstructed players
                                    end
                                end
                            else
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    lineesp.Color = ArmorColor -- Green color for players
                                end
                            end
                        else
                            lineesp.Visible = false
                        end
                    else
                        lineesp.Visible = false
                    end
                else
                    lineesp.Visible = false
                    lineesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end)
    end
})



local VTab2 = TabBox2:AddTab('Settings')

local WallCheckLOC = VTab2:AddToggle('Wallcheck', {
    Text = 'Wallcheck',
    Default = false, 
    Tooltip = 'Enable Wallcheck', 

    Callback = function(BRUHLOL)
        wallcheck = BRUHLOL
    end
})

WallCheckLOC:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 0, 0), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(WALLCOLTOG)
        WallColor = Color3.new(WALLCOLTOG.r, WALLCOLTOG.g, WALLCOLTOG.b)
    end
})

VTab2:AddLabel('Awake/Default'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0), 
    Title = 'ColorPicker', 
    Transparency = 0, 

    Callback = function(ColorTOG)
        ArmorColor = Color3.new(ColorTOG.r, ColorTOG.g, ColorTOG.b)
    end
})

VTab2:AddLabel('Sleepers'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 0, 1), 
    Title = 'ColorPicker', 
    Transparency = 0,

    Callback = function(SleeperTOG)
        SleeperColor = Color3.new(SleeperTOG.r, SleeperTOG.g, SleeperTOG.b)
    end
})


VTab2:AddLabel('Weapons'):AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'ColorPicker', 
    Transparency = 0,

    Callback = function(WeaponTOG)
        WepsColor = Color3.new(WeaponTOG.r, WeaponTOG.g, WeaponTOG.b)
    end
})


VTab2:AddSlider('ViewDistanceESP', {
    Text = 'ViewDistance',
    Default = 800,
    Min = 100,
    Max = 2000,
    Rounding = 0,
    Compact = false,

    Callback = function(distanceOP)
        distanceview = distanceOP
    end
})

VTab2:AddInput('TextBoxPlayers', {
    Default = 'Player',
    Numeric = false, 
    Finished = true, 

    Text = 'Custom "Player" text',
    Tooltip = 'Customize "Player" text', 

    Placeholder = 'Text here', 
   

    Callback = function(TEXTVALUE)
        PlayerText = '' .. TEXTVALUE .. ''
    end
})







local TabBox3 = Tabs.Main:AddRightTabbox() 


local VWTab1 = TabBox3:AddTab('World Visuals')

local IronESP = VWTab1:AddToggle('IronOre', {
    Text = 'Iron Ore',
    Default = false, 
    Tooltip = 'Shows Iron ore esp', 

    Callback = function(Value)
        IrontoggleAdornments()
    end
})

IronESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(IronTOG)
        IronColor = Color3.new(IronTOG.r, IronTOG.g, IronTOG.b)
    end
})


local StoneESP = VWTab1:AddToggle('StoneOre', {
    Text = 'Stone Ore',
    Default = false, 
    Tooltip = 'Shows Stone ore esp', 

    Callback = function(Value)
        StonetoggleAdornments()
    end
})

StoneESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(StoneTOG)
        StoneColor = Color3.new(StoneTOG.r, StoneTOG.g, StoneTOG.b)
    end
})


local NitrateESP = VWTab1:AddToggle('NitrateOre', {
    Text = 'Nitrate Ore',
    Default = false, 
    Tooltip = 'Shows Nitrate ore esp', 

    Callback = function(Value)
        NitratetoggleAdornments()
    end
})

NitrateESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(NitrateTOG)
        NitrateColor = Color3.new(NitrateTOG.r, NitrateTOG.g, NitrateTOG.b)
    end
})


VWTab1:AddDivider()

local PartBoxESP = VWTab1:AddToggle('PartBox', {
    Text = 'Part Box',
    Default = false, 
    Tooltip = 'Shows Partbox esp', 

    Callback = function(Value)
        PartBoxtoggleAdornments()
    end
})

PartBoxESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(PartBoxTOG)
        PartBoxColor = PartBoxTOG
    end
})


local MilitaryCrateESP = VWTab1:AddToggle('MilitaryCrate', {
    Text = 'Metal Crate',
    Default = false, 
    Tooltip = 'Shows Metalcrate esp', 

    Callback = function(Value)
        MetalCratetoggleAdornments()
    end
})

MilitaryCrateESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(MetalCrateTOG)
        MetalCrateColor = MetalCrateTOG
    end
})


local VendingMachineESP = VWTab1:AddToggle('VendingMachine', {
    Text = 'Vending Machine',
    Default = false, 
    Tooltip = 'Shows VendingMachine esp', 

    Callback = function(Value)
        VendingMachinetoggleAdornments()
    end
})

VendingMachineESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(VendingMachineTOG)
        VendingMachineColor = VendingMachineTOG
    end
})

VWTab1:AddDivider()

local ClaimTotemESP = VWTab1:AddToggle('ClaimTotem', {
    Text = 'Claim Totem',
    Default = false, 
    Tooltip = 'Shows ClaimTotem esp', 

    Callback = function(Value)
        
    end
})

ClaimTotemESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(Value)
        
    end
})


local CabinetESP = VWTab1:AddToggle('Cabinet', {
    Text = 'Cabinet',
    Default = false, 
    Tooltip = 'Shows Cabinet esp', 

    Callback = function(Value)
        
    end
})

CabinetESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(Value)
        
    end
})



local SmallLargeBoxESP = VWTab1:AddToggle('Small/LargeBox', {
    Text = 'Small/Medium Box',
    Default = false, 
    Tooltip = 'Shows Small and Medium Box esp', 

    Callback = function(Value)
        
    end
})

SmallLargeBoxESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(Value)
        
    end
})

local RespawnESP = VWTab1:AddToggle('Respawn', {
    Text = 'Spawn Totem',
    Default = false, 
    Tooltip = 'Shows Spawn totems esp', 

    Callback = function(Value)
        
    end
})

RespawnESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(Value)
        
    end
})



local VWTab2 = TabBox3:AddTab('Settings')

VWTab2:AddSlider('ViewDistanceESP', {
    Text = 'ViewDistance',
    Default = 500,
    Min = 100,
    Max = 1000,
    Rounding = 0,
    Compact = false,

    Callback = function(BLUR)
        maxDistance = BLUR
    end
})


local TabBox4 = Tabs.Main:AddLeftTabbox() 


local PMTab1 = TabBox4:AddTab('Player Misc')

PMTab1:AddLabel('Loot All'):AddKeyPicker('KeyPicker', {

    Default = 'Non',
    SyncToggleState = false,

    Mode = 'Toggle', -- Modes: Always, Toggle, Hold

    Text = 'Loot All', 
    NoUI = false, 

    Callback = function(Value)
        
    end,

        ChangedCallback = function(New)
            
        end
    })


    
PMTab1:AddLabel('Deposit All'):AddKeyPicker('KeyPicker', {

        Default = 'Non',
        SyncToggleState = false,
    
        Mode = 'Toggle', -- Modes: Always, Toggle, Hold
    
        Text = 'Deposit All', 
        NoUI = false, 
    
        Callback = function(Value)
            
        end,

        
    ChangedCallback = function(New)
        
    end
})


PMTab1:AddLabel('Bhop'):AddKeyPicker('KeyPicker', {

    Default = 'Non',
    SyncToggleState = false,

    Mode = 'Toggle', -- Modes: Always, Toggle, Hold

    Text = 'Bhop', 
    NoUI = false, 

    Callback = function(Value)
        
    end,

    
ChangedCallback = function(New)
    
end
})



local Tabs = {
    Main = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('UI Settings'),

}

local TabBox5 = Tabs.Main:AddLeftTabbox() 

local MTab1 = TabBox5:AddTab('World Misc')

MTab1:AddToggle('NoGrass', {
    Text = 'No Grass',
    Default = false, 
    Tooltip = 'Remove all grass', 

    Callback = function(Value)
        
    end
})

MTab1:AddToggle('NoTrees', {
    Text = 'No Leaves',
    Default = false, 
    Tooltip = 'Remove all tree leaves', 

    Callback = function(Value)
        
    end
})

MTab1:AddToggle('NoClouds', {
    Text = 'No Clouds',
    Default = false, 
    Tooltip = 'Remove all clouds', 

    Callback = function(Value)
        
    end
})



















local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'Insert', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind 


ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)


SaveManager:IgnoreThemeSettings()


SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })


ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')


SaveManager:BuildConfigSection(Tabs['UI Settings'])


ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()











