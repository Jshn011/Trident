-----------<WorldViusal LOCALS>

local IronColor = Color3.new(1, 1, 1)
local StoneColor = Color3.new(1, 1, 1)
local  NitrateColor = Color3.new(1, 1, 1)
local maxDistance = 600

-----------<WorldViusal LOCALS>



-----------------------------------<ORESBLABLABLABLAORES>--------------------------------
local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
                local parent = part.Parent
                if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Iron Ore]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = IronColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.00000000001) -- Wait for a very short time before checking again
    end
end

local function IrontoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

IrontoggleAdornments()

------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
            if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Flint") and part.Material == Enum.Material.Limestone then
			local parent = part.Parent
			if parent and parent:IsA("Model") and #parent:GetChildren() == 1 then
                    local distance = calculateDistance(part)
                    if distance <= maxDistance then
                        local isAdorned = false
                        for _, billboardGui in ipairs(TCESPs) do
                            if billboardGui.Adornee == part then
                                isAdorned = true
                                break
                            end
                        end
                        if not isAdorned then
                            local billboardGui = Instance.new("BillboardGui")
                            billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                            billboardGui.AlwaysOnTop = true
                            billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                            billboardGui.Adornee = part
                            billboardGui.Parent = part

                            local textLabel = Instance.new("TextLabel")
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = "[Stone Ore]" -- Replace with the desired text
                            textLabel.Font = Enum.Font.SourceSans
                            textLabel.TextColor3 = StoneColor
                            textLabel.TextSize = 15 -- Set the text size to 15
                            textLabel.Parent = billboardGui

                            table.insert(TCESPs, billboardGui)
                        end
                    else
                        table.insert(partsToRemove, part)
                    end
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.0000000001) -- Wait for a very short time before checking again
    end
end

local function StonetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

StonetoggleAdornments()


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
             if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Nitrate Ore]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = NitrateColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.00000000000000001) -- Wait for 1 second before checking again
    end
end

local function NitratetoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

NitratetoggleAdornments()


------------------------------------------------------------------------------------[][][][][]


local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornmentsLoop()
    while not adorned do
        local parts = workspace:GetDescendants()
        local partsToRemove = {} -- Store parts to remove ESPs from
        for _, part in ipairs(parts) do
             if part:IsA("UnionOperation") and part.Name == "State" and part.Material == Enum.Material.Neon then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 5, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Claim Totem]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = TotemColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
        for _, partToRemove in ipairs(partsToRemove) do
            for i, billboardGui in ipairs(TCESPs) do
                if billboardGui.Adornee == partToRemove then
                    billboardGui:Destroy()
                    table.remove(TCESPs, i)
                    break
                end
            end
        end
        wait(0.00000000000000001) -- Wait for 1 second before checking again
    end
end

local function TotemtoggleAdornments()
    if adorned then
        adorned = false
        spawn(addAdornmentsLoop) -- Start the loop
    else
        adorned = true
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

TotemtoggleAdornments()

-----------------------------------<ORESBLABLABLABLAORES>--------------------------------












-----------------------------------------------------------------------<MAIN LIBRARY>

local DiscordLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/discord"))()
local win = DiscordLib:Window("DiscordTime")

-----------------------------------------------------------------------<MAIN LIBRARY>



------// LPH >--------------------------------

function LPH_JIT_ULTRA(f)
	return f
	end
	function LPH_JIT_MAX(f)
	return f
	end  

	if not LPH_OBFUSCATED then
		LPH_JIT = function(...) return ... end
		LPH_JIT_MAX = function(...) return ... end
		LPH_JIT_ULTRA = function(...) return ... end
		LPH_NO_VIRTUALIZE = function(...) return ... end
		LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
		LPH_ENCSTR = function(...) return ... end
		LPH_STRENC = function(...) return ... end
		LPH_HOOK_FIX = function(...) return ... end
		LPH_CRASH = function() return print(debug.traceback()) end
	end

------// LPH >--------------------------------


    
--< Bypasses >--------------------------------
	
	local antihitbox
	antihitbox = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Size" and self.Name == "Torso" then
		return 0.6530659198760986, 2.220424175262451, 1.4367451667785645
	end
	return antihitbox(...)
	end))
	local antixray
	antixray = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Hitbox" and self.Name == "Transparency" then
		return 1
	end
	return antixray(...)
	end))
	local mt = getrawmetatable(game)
	make_writeable(mt)
	local old_index = mt.__index
	mt.__index = function(a,b)
	if tostring(a) == "Workspace" then
		if tostring(b) == "Gravity" then
			return 75;
		end
	end
	return old_index(a, b)
end    

--< Bypasses >--------------------------------



-----------<HBE LOCALS>

local HeadExtends = false

local Radius = 6

local TargetOptions = {
    ["Head"] = "Head",
    ["Torso"] = "Torso",
}
local selectedTarget = TargetOptions["Head"]

local HBXColor = Color3.new(1, 1, 1)

local TargetMaterial = {
    ["Plastic"] = Enum.Material.Plastic, 
    ["Wood"] = Enum.Material.Wood,
    ["Slate"] = Enum.Material.Slate,
    ["Concrete"] = Enum.Material.Concrete,
    ["CorrodedMetal"] = Enum.Material.CorrodedMetal,
    ["DiamondPlate"] = Enum.Material.DiamondPlate,
    ["Foil"] = Enum.Material.Foil,
    ["Grass"] = Enum.Material.Grass,
    ["Ice"] = Enum.Material.Ice,
    ["Marble"] = Enum.Material.Marble,
    ["Granite"] = Enum.Material.Granite,
    ["Brick"] = Enum.Material.Brick,
    ["Pebble"] = Enum.Material.Pebble,
    ["Sand"] = Enum.Material.Sand,
    ["Fabric"] = Enum.Material.Fabric,
    ["SmoothPlastic"] = Enum.Material.SmoothPlastic,
    ["Metal"] = Enum.Material.Metal,
    ["WoodPlanks"] = Enum.Material.WoodPlanks,
    ["Neon"] = Enum.Material.Neon,
    ["Cobblestone"] = Enum.Material.Cobblestone,
    ["Glass"] = Enum.Material.Glass,
    ["Asphalt"] = Enum.Material.Asphalt,
    ["LeafyGrass"] = Enum.Material.LeafyGrass,
    ["Salt"] = Enum.Material.Salt,
    ["Limestone"] = Enum.Material.Limestone,
    ["Basalt"] = Enum.Material.Basalt,
    ["ForceField"] = Enum.Material.ForceField,
}
local selectedMaterial = TargetMaterial["ForceField"]

local TargetShape = {
    ["Ball"] = Enum.PartType.Ball, 
    ["Block"] = Enum.PartType.Block,
    ["Cylinder"] = Enum.PartType.Cylinder,
}
local selectedShape = TargetShape["Ball"]

local HitboxTransparency = 0.5

local HBXH = false
local SizeX = 10
local SizeY = 10
local SizeZ = 10

-----------<HBE LOCALS>




-----------<Visual LOCALS>

local ArmorColor = Color3.new(1, 0, 0)
local SleeperColor = Color3.new(0, 0, 1)
local distanceview = 800
local WepsColor = Color3.new(0, 1, 0)
local wallcheck = false
local WallColor = Color3.new(1, 1, 1)

-----------<Viusal LOCALS>



-----------<WMisc LOCALS>

local LightingEnabled = true
local GlobalShadowsToggle = false
local RemoveFogToggle = false
local RemoveCloudsToggle = false
local GrassRemove = false
local LeavesON = false
local bind1 = false  
local GravityEnabled = false
local defaultGravity = 75
local CurrentSliderValue2 = 65

-----------<WMisc LOCALS>



---------------------------------------------------------------<Channel 1>
local serv = win:Server("Trident Survival", "")
---------------------------------------------------------------<Channel 1>


-----------<GUI HBE>

local chan = serv:Channel("hitbox-expander")

chan:Toggle(
    "Enable",
    false,
    function(HBEON)
        HeadExtends = HBEON 
    end
)

chan:Dropdown(
    "Target",
    {"Head", "Torso"},
    function(HBETRAGET)
        selectedTarget = TargetOptions[HBETRAGET]
    end
)

chan:Dropdown(
    "Material",
    {"ForceField", "Neon", "Plastic", "Metal", "Wood", "Slate", "Concrete", "Foil", "DiamondPlate", "CorrodedMetal", "Grass", "Ice", "Marble", "Granite", "Brick", "Pebble", "Sand", "Fabric", "SmoothPlastic", "WoodPlanks", "Cobblestone", "Glass", "Asphalt", "LeafyGrass", "Salt", "Limestone", "Basalt"},
    function(HBEMATERIAL)
        selectedMaterial = TargetMaterial[HBEMATERIAL]
    end
)

chan:Dropdown(
    "Shape",
    {"Ball", "Block", "Cylinder"},
    function(HBESHAPE)
        selectedShape = TargetShape[HBESHAPE]
    end
)

chan:Slider(
    "Size",
    1,
    12,
    6,
    function(HBESIZE)
        Radius = HBESIZE
    end
)

chan:Slider(
    "Transparency",
    0,
    1,
    0.5,
    function(HBETRANS)     
        HitboxTransparency = HBETRANS
    end
)

chan:Colorpicker(
    "HitboxColor",
    Color3.fromRGB(255, 255, 255),
    function(HBECOLOR)
        HBXColor = Color3.new(HBECOLOR.r, HBECOLOR.g, HBECOLOR.b)
    end
)

-----------<GUI HBE>



-----------<HBE Function>

local HedsOn = Instance.new("Part")
HedsOn.Name = "HedsOn"
HedsOn.Anchored = false
HedsOn.CanCollide = false
HedsOn.Transparency = HitboxTransparency
HedsOn.Color = HBXColor
HedsOn.Material = selectedMaterial
HedsOn.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)  
HedsOn.Shape = selectedShape or Enum.PartType.Ball
HedsOn.Parent = game.ReplicatedStorage

task.spawn(function()
    while task.wait() do
        if HeadExtends then
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then                        	
                    local BigHeadsPart = Instance.new("Part")
                    BigHeadsPart.Name = selectedTarget
                    BigHeadsPart.Anchored = false
                    BigHeadsPart.CanCollide = false
                    BigHeadsPart.Transparency = HitboxTransparency
                    BigHeadsPart.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)
                    BigHeadsPart.Material = selectedMaterial or Enum.Material.ForceField
                    BigHeadsPart.Color = HBXColor
                    BigHeadsPart.Shape = selectedShape or Enum.PartType.Ball
                    
                
                    local DeletePart = Instance.new("Weld")
                    DeletePart.Parent = BigHeadsPart
                    DeletePart.Name = "FAKEHEAD"
                    
                    local HeadsParts = BigHeadsPart:Clone()
                    HeadsParts.Parent = i
                    HeadsParts.Orientation = i.HumanoidRootPart.Orientation
                    
                    local clonedHedsOn = HedsOn:Clone()
                    clonedHedsOn.Parent = i
                    
                    local Headswelding = Instance.new("Weld")
                    Headswelding.Parent = HeadsParts
                    Headswelding.Part0 = i.HumanoidRootPart
                    Headswelding.Part1 = HeadsParts
                    
                    HeadsParts.Position = i[selectedTarget].Position

                end
            end
        else
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
                    i.HedsOn:Remove()
                    for _, a in ipairs(i:GetChildren()) do
                      if (selectedTarget == "Head" or selectedTarget == "Torso") and a.Name == selectedTarget and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                            a:Remove()
                        end
                    end
                end
            end
        end
    end
end)

-----------<HBE Function>





---------------------------------------------------------------<Channel 2>
local chan2 = serv:Channel("head-expander")
---------------------------------------------------------------<Channel 2>


-----------<GUI HBE 2>
chan2:Toggle(
    "Enable",
    false,
    function(HBEON2)
        HBXH = HBEON2
    local function AdjustHeadSize(i)
        if i:FindFirstChild("HumanoidRootPart") then
            if HBXH then
                i.Head.Size = Vector3.new(SizeX, SizeY, SizeZ)
            else
                i.Head.Size = Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
            end
        end
    end
    
    workspace.ChildAdded:Connect(function(child)
        AdjustHeadSize(child)
    end)
    
    for _, existingChild in pairs(workspace:GetChildren()) do
        AdjustHeadSize(existingChild)
    end
    end
)

chan2:Slider(
    "Size X",
    1,
    12,
    10,
    function(SX)     
        SizeX = SX
    end
)

chan2:Slider(
    "Size Y",
    1,
    12,
    10,
    function(SY)     
        SizeY = SY
    end
)

chan2:Slider(
    "Size Z",
    1,
    12,
    10,
    function(SZ)     
        SizeZ = SZ
    end
)

-----------<GUI HBE 2>




---------------------------------------------------------------<Channel 3>
local chan3 = serv:Channel("player-visuals")
---------------------------------------------------------------<Channel 3>




-----------<PlayerEsp Function>
chan3:Toggle(
    "Player",
    false,
    function()

        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function Playeresp(drop)
            local dropesp = Drawing.new("Text")
            dropesp.Visible = false
            dropesp.Center = true
            dropesp.Outline = true
            dropesp.Font = 2
            dropesp.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
                    
                    -- Calculate distance to humanoid
                    local distance = (drop.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
                    
                    if drop_onscreen and distance <= distanceview then
                        if wallcheck then
                            -- Raycast to check for obstructions
                            local raycastParams = RaycastParams.new()
                            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                            raycastParams.FilterDescendantsInstances = {drop}
                            local raycastResult = workspace:Raycast(
                                camera.CFrame.Position,
                                drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                raycastParams
                            )
                            
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = "Player"
                            
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                if not raycastResult then
                                    dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                else
                                    dropesp.Color = WallColor -- Red color for obstructed players
                                end
                            end
                        else
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = "Player"
                            
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                dropesp.Color = ArmorColor -- Green color for players
                            end
                        end
                        
                        dropesp.Visible = true
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                    dropesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for i, drop in next, workspace:GetChildren() do
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end
        
        workspace.ChildAdded:Connect(function(drop)
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end)
        
end    
)
-----------<PlayerEsp Function>




-----------<Highlight Function>
chan3:Toggle(
    "Highlight",
    false,
    function(BRUH2)

    local highlightInstances = {}
    local runService = game:GetService("RunService")
        
        local function createHighlight(parent)
            local highlight = Instance.new("Highlight")
            highlight.Adornee = parent
            highlight.Name = "Chamse"
            highlight.FillColor = Color3.fromRGB(25, 25, 25)
            highlight.DepthMode = "AlwaysOnTop"
            highlight.FillTransparency = 0.5  -- Adjust the transparency value as needed
            highlight.OutlineTransparency = 0
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.Parent = parent
        
            table.insert(highlightInstances, highlight)
        end
        
        runService.RenderStepped:Connect(function()
            for _, a in ipairs(workspace:GetChildren()) do
                if a:FindFirstChild("HumanoidRootPart") and not a:FindFirstChild("Chamse") then
                    if a ~= game:GetService("Workspace").Ignore.FPSArms then
                        createHighlight(a)
                    end
                end
            end
        end)
    end 
)
-----------<Highlight Function>




-----------<ArmorEsp Function>
chan3:Toggle(
    "Armor",
    false,
    function()

        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")

        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function espArmor(drop)
            local armorNameLabel = Drawing.new("Text")
            armorNameLabel.Visible = false
            armorNameLabel.Center = true
            armorNameLabel.Outline = true
            armorNameLabel.Font = 2
            armorNameLabel.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            local armorFolder = drop.Armor and drop.Armor:FindFirstChildOfClass("Folder")
                            if armorFolder then
                                local armorName = armorFolder.Name
                                if armorName == "WoodHelmet" or armorName == "WoodChestplate" or armorName == "WoodLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[WoodArmor]"
                                elseif armorName == "RiotHelmet" or armorName == "RiotChestplate" or armorName == "RiotLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[RiotArmor]"
                                elseif armorName == "SteelHelmet" or armorName == "SteelChestplate" or armorName == "SteelLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[SteelArmor]"
                                elseif armorName == "IronHelmet" or armorName == "IronChestplate" or armorName == "IronLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[IronArmor]"
                                else
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[None]"
                                end
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = {drop}
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
                                        
                                        if not raycastResult then
                                            armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
                                
                                armorNameLabel.Visible = true
                            else
                                armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                armorNameLabel.Text = "[None]"
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = {drop}
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
                                        
                                        if not raycastResult then
                                            armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
                                
                                armorNameLabel.Visible = true
                            end
                        else
                            armorNameLabel.Visible = false
                        end
                    else
                        armorNameLabel.Visible = false
                    end
                else
                    armorNameLabel.Visible = false
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end)
        
end 
)
-----------<ArmorEsp Function>



-----------<WeaponEsp Function>
chan3:Toggle(
    "Weapon",
    false,
    function()

        local function applyItemESP(itemName)
            local function createESP(item, itemName)
               local a = Instance.new("BillboardGui", item)
               a.Name = "ItemESP"
               a.Size = UDim2.new(0, 100, 0, 20)  -- Adjust the size to fit the text comfortably
               a.AlwaysOnTop = true
               a.StudsOffset = Vector3.new(5, 5, 0)  -- Adjust the Y offset to move the ESP higher
         
               local b = Instance.new("Frame", a)
               b.Size = UDim2.new(1, 0, 1, 0)
               b.BackgroundTransparency = 1  -- Adjust transparency for a softer look
               b.BackgroundColor3 = Color3.new(0, 0.5, 0)  -- Dark green color
         
               local c = Instance.new('TextLabel', b)
               c.Size = UDim2.new(1, 0, 1, 0)
               c.BackgroundTransparency = 1
               c.TextSize = 20  -- Slightly smaller text size
               c.Font = Enum.Font.Arial  -- Apply Gotham font
               c.TextColor3 = WepsColor  -- White text color
               c.TextStrokeTransparency = 0.5
               c.TextStrokeColor3 = Color3.new(0, 0, 0)  -- Black text stroke
               c.Text = itemName
            end
         
            for _, v in pairs(game.workspace:GetDescendants()) do
               if v.Name == itemName then
                  createESP(v, itemName)
               end
            end
         
            game.workspace.DescendantAdded:Connect(function(item)
               if item.Name == itemName then
                  createESP(item, itemName)
               end
            end)
         end
         
         local itemsToApplyESP = {
            "Bow",
            "PipePistol",
            "Crossbow",
            "PipeSMG",
            "Blunderbuss",
            "USP9",
            "M4A1",
            "SteelHammer",
            "StoneHammer",
            "Hammer",
            "SCAR",
            "IronHammer",
            "RPG",
            "PumpShotgun",
            "MiningDrill",
            "LeverActionRifle",
            "HMAR",
            "GaussRifle",
            "FlameThrower",
            "Crowbar"
         }
         
         for _, itemName in ipairs(itemsToApplyESP) do
            applyItemESP(itemName)
         end
        end 
)
-----------<WeaponEsp Function>




-----------<DistanceEsp Function>
chan3:Toggle(
    "Distance",
    false,
    function()

        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function espDistance(drop)
            local dropesp = Drawing.new("Text")
            dropesp.Visible = false
            dropesp.Center = true
            dropesp.Outline = true
            dropesp.Font = 2
            dropesp.Size = 15
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            if wallcheck then
                                -- Raycast to check for obstructions
                                local raycastParams = RaycastParams.new()
                                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                raycastParams.FilterDescendantsInstances = {drop}
                                local raycastResult = workspace:Raycast(
                                    camera.CFrame.Position,
                                    drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                    raycastParams
                                )
                                
                                dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - -15) -- Adjusted position with a 15-pixel offset above
                                dropesp.Text = string.format("[ %.1f studs ]", distance)
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    dropesp.Color = SleeperColor -- Green color for sleeping players
                                else
                                    if not raycastResult then
                                        dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    else
                                        dropesp.Color = WallColor -- Red color for obstructed players
                                    end
                                end
                                
                                dropesp.Visible = true
                            else
                                dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - 15) -- Adjusted position with a 15-pixel offset above
                                dropesp.Text = string.format("[ %.1f studs ]", distance)
                                
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    dropesp.Color = SleeperColor -- Green color for sleeping players
                                else
                                    dropesp.Color = ArmorColor -- Default color for awake players
                                end
                                
                                dropesp.Visible = true
                            end
                        else
                            dropesp.Visible = false
                        end
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                    dropesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for i, drop in ipairs(workspace:GetChildren()) do
            if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
                espDistance(drop)
            end
        end
        
        workspace.ChildAdded:Connect(function(drop)
            if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
                espDistance(drop)
            end
        end)
        
    end 
)
-----------<DistanceEsp Function>




-----------<LineEsp Function>
chan3:Toggle(
    "Line",
    false,
    function()

        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        

        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function esp(drop)
            local lineesp = Drawing.new("Line")
            lineesp.Visible = false
            lineesp.From = Vector2.new(0, 0)
            lineesp.To = Vector2.new(0, 0)
            lineesp.Thickness = 2
            
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:IsDescendantOf(workspace) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            if wallcheck then
                                -- Raycast to check for obstructions
                                local raycastParams = RaycastParams.new()
                                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                raycastParams.FilterDescendantsInstances = {drop}
                                local raycastResult = workspace:Raycast(
                                    camera.CFrame.Position,
                                    drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                    raycastParams
                                )
                                
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    if not raycastResult then
                                        lineesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    else
                                        lineesp.Color = WallColor -- Red color for obstructed players
                                    end
                                end
                            else
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    lineesp.Color = ArmorColor -- Green color for players
                                end
                            end
                        else
                            lineesp.Visible = false
                        end
                    else
                        lineesp.Visible = false
                    end
                else
                    lineesp.Visible = false
                    lineesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end)
        
    end 
)
-----------<LineEsp Function>



chan3:Slider(
    "ViewDistance",
    1,
    2000,
    800,
    function(distanceOP)     
        distanceview = distanceOP
    end
)


chan3:Toggle(
    "WallCheck",
    false,
    function(BRUHLOL)
        wallcheck = BRUHLOL
    end
)


chan3:Label("Awake")
chan3:Colorpicker(
    "AwakeColor",
    Color3.fromRGB(255, 0, 0),
    function(ColorTOG)
        ArmorColor = Color3.new(ColorTOG.r, ColorTOG.g, ColorTOG.b)
    end
)


chan3:Label("Sleeper")
chan3:Colorpicker(
    "SleeperColor",
    Color3.fromRGB(0, 0, 255),
    function(SleeperTOG)
        SleeperColor = Color3.new(SleeperTOG.r, SleeperTOG.g, SleeperTOG.b)
    end
)

chan3:Label("Weapon")
chan3:Colorpicker(
    "WeaponColor",
    Color3.fromRGB(0, 255, 0),
    function(WeaponTOG)
        WepsColor = Color3.new(WeaponTOG.r, WeaponTOG.g, WeaponTOG.b)
    end
)

chan3:Label("WallCheck")
chan3:Colorpicker(
    "AwakeColor",
    Color3.fromRGB(255, 255, 255),
    function(WALLCOLTOG)
        WallColor = Color3.new(WALLCOLTOG.r, WALLCOLTOG.g, WALLCOLTOG.b)
    end
)



---------------------------------------------------------------<Channel 4>
local chan4 = serv:Channel("world-visuals")
---------------------------------------------------------------<Channel 4>

chan4:Toggle(
    "IronOre",
    false,
    function()
        IrontoggleAdornments()
    end
)

chan4:Toggle(
    "StoneOre",
    false,
    function()
        StonetoggleAdornments()
    end
)

chan4:Toggle(
    "NitrateOre",
    false,
    function()
        NitratetoggleAdornments()
    end
)

chan4:Toggle(
    "ClaimTotem",
    false,
    function()
        TotemtoggleAdornments()
    end
)


chan4:Slider(
    "ViewDistance",
    1,
    1000,
    600,
    function(BLUR)     
        maxDistance = BLUR
    end
)



chan4:Label("IronOre")
chan4:Colorpicker(
    "WeaponColor",
    Color3.fromRGB(255, 255, 255),
    function(IronTOG)
        IronColor = Color3.new(IronTOG.r, IronTOG.g, IronTOG.b)
    end
)

chan4:Label("StoneOre")
chan4:Colorpicker(
    "WeaponColor",
    Color3.fromRGB(255, 255, 255),
    function(StoneTOG)
        StoneColor = Color3.new(StoneTOG.r, StoneTOG.g, StoneTOG.b)
    end
)

chan4:Label("NitrateOre")
chan4:Colorpicker(
    "WeaponColor",
    Color3.fromRGB(255, 255, 255),
    function(NitrateTOG)
        NitrateColor = Color3.new(NitrateTOG.r, NitrateTOG.g, NitrateTOG.b)
    end
)


chan4:Label("ClaimTotem")
chan4:Colorpicker(
    "WeaponColor",
    Color3.fromRGB(255, 255, 255),
    function(TotemTOG)
        TotemColor = Color3.new(TotemTOG.r, TotemTOG.g, TotemTOG.b)
    end
)


---------------------------------------------------------------<Channel 5>
local chan5 = serv:Channel("world-misc")
---------------------------------------------------------------<Channel 5>

chan5:Toggle(
    "Remove Grass",
    false,
    function(RGRASS)
        GrassRemove = RGRASS

        if LightingEnabled and GrassRemove == true then
            sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
            elseif LightingEnabled and GrassRemove == false then
            sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
            end
    end
)

chan5:Toggle(
    "Remove Trees",
    false,
    function(RTREES)
        LeavesON = RTREES 

            
    local function applyItemTransparency(itemName)
        for _, v in pairs(game.workspace:GetDescendants()) do
           if v.Name == itemName then
              v.Transparency = LeavesON and 1 or 0 -- Set transparency based on the LeavesON variable
           end
        end
     
        game.workspace.DescendantAdded:Connect(function(item)
           if item.Name == itemName then
              item.Transparency = LeavesON and 1 or 0 -- Set transparency for newly added items based on LeavesON
           end
        end)
     end
     
     local itemsToApplyTransparency = {
        "Elm1_Leaves",
        "Brich1_Leaves",
        "Fir3_Leaves"
     }
     
     for _, itemName in ipairs(itemsToApplyTransparency) do
        applyItemTransparency(itemName)
     end
    end
)

chan5:Toggle(
    "Remove Clouds",
    false,
    function(RCLOUDS)
        RemoveCloudsToggle = RCLOUDS

        if LightingEnabled and RemoveCloudsToggle == true then
            sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
            elseif LightingEnabled and RemoveCloudsToggle == false then
            sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
            end
    end
)

chan5:Toggle(
    "Remove Fog",
    false,
    function(RFOG)
        RemoveFogToggle = RFOG

        if LightingEnabled and RemoveFogToggle == true then
            sethiddenproperty(game:GetService("Lighting"), "FogStart", math.huge)
            elseif LightingEnabled and RemoveFogToggle == false then
            sethiddenproperty(game:GetService("Lighting"), "FogStart", 150)
            end
    end
)

chan5:Toggle(
    "Remove Shadows",
    false,
    function(RSHADOWS)
        GlobalShadowsToggle = RSHADOWS

        if LightingEnabled and GlobalShadowsToggle == true then
            sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", false)
            elseif LightingEnabled and GlobalShadowsToggle == false then
            sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", true)
            end
    end
)


chan5:Bind(
    "Loot All",
    Enum.KeyCode.Z,
    function()
        for i = 1, 20 do
            local ohNumber1 = 12
            local ohNumber2 = i
            local ohBoolean3 = true
            game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
            end
    end
)

chan5:Bind(
    "Deposit All",
    Enum.KeyCode.X,
    function()
        for i = 1, 20 do
            local ohNumber1 = 12
            local ohNumber2 = i
            local ohBoolean3 = false
            game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
            end
    end
)




-- Create a key binding using the chan5:Bind method
chan5:Bind(
    "Auto Bhop",
    Enum.KeyCode.B,
    function()

        local pressx = true
        local stoprun = pressx
        task.spawn(function()
        while true do
        local state = pressx
        if state then
        keypress(0x57)
        keypress(0x10)
        wait(0.05)
        keypress(0x43)
        keypress(0x20)
        keyrelease(0x20)
        wait(0.5)
        keyrelease(0x43)
        wait(1)
        end
        wait()
        end
        end)
        task.spawn(function()
        while task.wait() do
        local state = pressx
        if not state then
        if stoprun then
        keyrelease(0x57)
        keyrelease(0x10)
        stoprun = pressx
        end
        else
        stoprun = pressx
        end
        end
        end)
    end
)


chan5:Toggle(
    "Gravity",
    false,
    function(GRAVTOG)
        GravityEnabled = GRAVTOG

        if not GravityEnabled then
            sethiddenproperty(game:GetService("Workspace"), "Gravity", defaultGravity)
            else
            sethiddenproperty(game:GetService("Workspace"), "Gravity", CurrentSliderValue2)
            end
    end
)

chan5:Slider(
    "Gravity Value",
    50,
    150,
    65,
    function(GVALUETOG)     
        CurrentSliderValue2 = GVALUETOG
    end
)
