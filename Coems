local engine = loadstring(game:HttpGet("https://raw.githubusercontent.com/Singularity5490/rbimgui-2/main/rbimgui-2.lua"))()



function LPH_JIT_ULTRA(f)
	return f
	end
	function LPH_JIT_MAX(f)
	return f
	end  

	--// LPH >--------------------------------
	if not LPH_OBFUSCATED then
		LPH_JIT = function(...) return ... end
		LPH_JIT_MAX = function(...) return ... end
		LPH_JIT_ULTRA = function(...) return ... end
		LPH_NO_VIRTUALIZE = function(...) return ... end
		LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
		LPH_ENCSTR = function(...) return ... end
		LPH_STRENC = function(...) return ... end
		LPH_HOOK_FIX = function(...) return ... end
		LPH_CRASH = function() return print(debug.traceback()) end
	end

	--< Bypasses >--------------------------------
	local antihitbox
	antihitbox = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Size" and self.Name == "Torso" then
		return 0.6530659198760986, 2.220424175262451, 1.4367451667785645
	end
	return antihitbox(...)
	end))
	local antixray
	antixray = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Hitbox" and self.Name == "Transparency" then
		return 1
	end
	return antixray(...)
	end))
	local mt = getrawmetatable(game)
	make_writeable(mt)
	local old_index = mt.__index
	mt.__index = function(a,b)
	if tostring(a) == "Workspace" then
		if tostring(b) == "Gravity" then
			return 75;
		end
	end
	return old_index(a, b)
end    
--< Bypasses >--------------------------------




local window1 = engine.new({
    text = "Demontime [Forced Update]",
    size = UDim2.new(300, 200),
})


-----------<LOCALS>

local HeadExtends = false
local Radius = 6
local HitboxTransparency = 0.5
local TargetOptions = {
    ["Head"] = "Head",
    ["Torso"] = "Torso",
}
local selectedTarget = TargetOptions["Head"]
local HBXColor = Color3.new(1, 1, 1)
local TargetMaterial = {
    ["Plastic"] = Enum.Material.Plastic, 
    ["Wood"] = Enum.Material.Wood,
    ["Slate"] = Enum.Material.Slate,
    ["Concrete"] = Enum.Material.Concrete,
    ["CorrodedMetal"] = Enum.Material.CorrodedMetal,
    ["DiamondPlate"] = Enum.Material.DiamondPlate,
    ["Foil"] = Enum.Material.Foil,
    ["Grass"] = Enum.Material.Grass,
    ["Ice"] = Enum.Material.Ice,
    ["Marble"] = Enum.Material.Marble,
    ["Granite"] = Enum.Material.Granite,
    ["Brick"] = Enum.Material.Brick,
    ["Pebble"] = Enum.Material.Pebble,
    ["Sand"] = Enum.Material.Sand,
    ["Fabric"] = Enum.Material.Fabric,
    ["SmoothPlastic"] = Enum.Material.SmoothPlastic,
    ["Metal"] = Enum.Material.Metal,
    ["WoodPlanks"] = Enum.Material.WoodPlanks,
    ["Neon"] = Enum.Material.Neon,
    ["Cobblestone"] = Enum.Material.Cobblestone,
    ["Glass"] = Enum.Material.Glass,
    ["Asphalt"] = Enum.Material.Asphalt,
    ["LeafyGrass"] = Enum.Material.LeafyGrass,
    ["Salt"] = Enum.Material.Salt,
    ["Limestone"] = Enum.Material.Limestone,
    ["Basalt"] = Enum.Material.Basalt,
    ["ForceField"] = Enum.Material.ForceField,
}
local selectedMaterial = TargetMaterial["ForceField"]
local highlightInstances = {}


-----------<LOCALS>



-----------<GUI>

window1.open()
local tab1 = window1.new({
    text = "Main",
})


local label1 = tab1.new("label", {
    text = "Hitbox Expander",
    color = Color3.new(255, 255, 255),
})


local switch1 = tab1.new("switch", {
    text = "Enable";
})
switch1.set(false)
switch1.event:Connect(function(isToggled)
   HeadExtends = isToggled
end)



local dropdown1 = tab1.new("dropdown", {
    text = "Target",
})
dropdown1.new("Head")
dropdown1.new("Torso")
dropdown1.event:Connect(function(STarget)
    selectedTarget = TargetOptions[STarget]
end)


local dropdown1 = tab1.new("dropdown", {
    text = "Material",
})
dropdown1.new("Plastic")
dropdown1.new("Wood")
dropdown1.new("Slate")
dropdown1.new("Concrete")
dropdown1.new("CorrodedMetal")
dropdown1.new("DiamondPlate")
dropdown1.new("Foil")
dropdown1.new("Grass")
dropdown1.new("Ice")
dropdown1.new("Marble")
dropdown1.new("Granite")
dropdown1.new("Brick")
dropdown1.new("Pebble")
dropdown1.new("Sand")
dropdown1.new("Fabric")
dropdown1.new("SmoothPlastic")
dropdown1.new("Metal")
dropdown1.new("WoodPlanks")
dropdown1.new("Neon")
dropdown1.new("Cobblestone")
dropdown1.new("Glass")
dropdown1.new("Asphalt")
dropdown1.new("LeafyGrass")
dropdown1.new("Salt")   
dropdown1.new("Limestone")
dropdown1.new("Basalt")
dropdown1.new("ForceField")
dropdown1.event:Connect(function(MTarget)
  selectedMaterial = TargetMaterial["MTarget"]
end)


local slider1 = tab1.new("slider", {
    text = "Size",
    color = Color3.new(0.8, 0.5, 0),
    min = 1,
    max = 12,
    value = 6,
    rounding = 1,
})
slider1.event:Connect(function(Sradius)
 Radius = Sradius
end)
slider1.set(6)



local slider2 = tab1.new("slider", {
    text = "Transparency",
    color = Color3.new(0.8, 0.5, 0),
    min = 0,
    max = 1,
    value = 0.5,
    rounding = 0.1,
})
slider2.event:Connect(function(STrans)
 HitboxTransparency = STrans
end)
slider2.set(0.5)



local color1 = tab1.new("color", {
    color = Color3.new(1, 1, 1),
    text = "Color Picker",
})
color1.event:Connect(function(Scolor)
   HBXColor = Color3.new(Scolor.r, Scolor.g, Scolor.b)
end)

-----------<GUI>




-----------<GUI2>

local tab2 = window1.new({
    text = "Visual",
})


local switch1 = tab2.new("switch", {
    text = "Player";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    _G.ToggleESP = true
   local camera = workspace.CurrentCamera
local runservice = game:GetService("RunService")
local espActive = false -- Toggle variable

local function toggleESP()
    espActive = not espActive
    if espActive then
        for i, drop in ipairs(workspace:GetChildren()) do
            if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end
    else
        -- Remove all ESP
        for _, child in ipairs(workspace:GetChildren()) do
            if child:IsA("Drawing") then
                child:Remove()
            end
        end
    end
end

local function createESP(drop)
    local dropesp = Drawing.new("Text")
    dropesp.Visible = false
    dropesp.Center = true
    dropesp.Outline = true
    dropesp.Font = 2
    dropesp.Color = Color3.fromRGB(255, 255, 255) -- Change color to white
    dropesp.Size = 15

    local renderstepped
    renderstepped = runservice.RenderStepped:Connect(function()
        if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
            local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
            local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude

            if drop_onscreen and distance <= 1000 then
                dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                dropesp.Text = "Player"
                dropesp.Visible = true
            else
                dropesp.Visible = false
            end
        else
            dropesp.Visible = false
            dropesp:Remove()
            renderstepped:Disconnect()
        end
    end)
end

function esp(drop)
    if espActive then
        createESP(drop)
    end
end

workspace.ChildAdded:Connect(function(drop)
    if espActive and drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
        createESP(drop)
    end
end)

-- Command to toggle ESP
game:GetService("RunService").Heartbeat:Connect(function()
    if game:GetService("RunService"):IsRunning() then
        if _G.ToggleESP then
            _G.ToggleESP = nil
            toggleESP()
        end
    end
end)
end)

local switch1 = tab2.new("switch", {
    text = "Armor";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    local camera = workspace.CurrentCamera
local runservice = game:GetService("RunService")

function espArmor(drop)
    local armorNameLabel = Drawing.new("Text")
    armorNameLabel.Visible = false
    armorNameLabel.Center = true
    armorNameLabel.Outline = true
    armorNameLabel.Font = 2
    armorNameLabel.Color = Color3.fromRGB(255, 255, 255) -- Change color to white
    armorNameLabel.Size = 15
    
    local renderstepped
    renderstepped = runservice.RenderStepped:Connect(function()
        if drop and drop:FindFirstChild("HumanoidRootPart") then
            local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
    
            if drop_onscreen then
                local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                if distance <= 1000 then
                    local armorFolder = drop.Armor and drop.Armor:FindFirstChildOfClass("Folder")
                    if armorFolder then
                        local armorName = armorFolder.Name
                        if armorName == "WoodHelmet" or armorName == "WoodChestplate" or armorName == "WoodLeggings" then
                            armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                            armorNameLabel.Text = "[WoodArmor]"
                            armorNameLabel.Visible = true
                        elseif armorName == "RiotHelmet" or armorName == "RiotChestplate" or armorName == "RiotLeggings" then
                            armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                            armorNameLabel.Text = "[RiotArmor]"
                            armorNameLabel.Visible = true
                        elseif armorName == "SteelHelmet" or armorName == "SteelChestplate" or armorName == "SteelLeggings" then
                            armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                            armorNameLabel.Text = "[SteelArmor]"
                            armorNameLabel.Visible = true
                        elseif armorName == "IronHelmet" or armorName == "IronChestplate" or armorName == "IronLeggings" then
                            armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                            armorNameLabel.Text = "[IronArmor]"
                            armorNameLabel.Visible = true
                        else
                            armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                            armorNameLabel.Text = "[None]"
                            armorNameLabel.Visible = true
                        end
                    else
                        armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -15)
                        armorNameLabel.Text = "[None]"
                        armorNameLabel.Visible = true
                    end
                else
                    armorNameLabel.Visible = false
                end
            else
                armorNameLabel.Visible = false
            end
        else
            armorNameLabel.Visible = false
            renderstepped:Disconnect()
        end
    end)
end

for _, drop in ipairs(workspace:GetDescendants()) do
    if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
        espArmor(drop)
    end
end

workspace.DescendantAdded:Connect(function(drop)
    if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
        espArmor(drop)
    end
end)
	
	end)

local switch1 = tab2.new("switch", {
    text = "Weapon";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    loadstring(game:HttpGet("https://pastebin.com/raw/btCcjA68", true))()
end)

local switch1 = tab2.new("switch", {
    text = "Distance";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    local camera = workspace.CurrentCamera
    local runservice = game:GetService("RunService")

    function espDistance(drop)
        local dropesp = Drawing.new("Text")
        dropesp.Visible = false
        dropesp.Center = true
        dropesp.Outline = true
        dropesp.Font = 2
        dropesp.Color = Color3.fromRGB(255, 255, 255) -- Change color to white
        dropesp.Size = 15
    
        local renderstepped
        renderstepped = runservice.RenderStepped:Connect(function()
            if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
    
                if drop_onscreen then
                    local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                    if distance <= 1000 then
                        dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - 15) -- Adjusted position with a 15-pixel offset above
                        dropesp.Text = string.format("[ %.1f studs ]", distance)
                        dropesp.Visible = true
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                end
            else
                dropesp.Visible = false
                dropesp:Remove()
                renderstepped:Disconnect()
            end
        end)
    end
for i, drop in ipairs(workspace:GetChildren()) do
if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
    espDistance(drop)
end
end

workspace.ChildAdded:Connect(function(drop)
if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
    espDistance(drop)
end
end)

end)

local switch1 = tab2.new("switch", {
    text = "Line";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    local camera = workspace.CurrentCamera
local runservice = game:GetService("RunService")

function esp(drop)
    local lineesp = Drawing.new("Line")
    lineesp.Visible = false
    lineesp.From = Vector2.new(0, 0)
    lineesp.To = Vector2.new(0, 0)
    lineesp.Color = Color3.fromRGB(255, 255, 255) -- Change color to white
    lineesp.Thickness = 2
    
    local renderstepped
    renderstepped = runservice.RenderStepped:Connect(function()
        if drop and drop:IsDescendantOf(workspace) and drop:FindFirstChild("HumanoidRootPart") then
            local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
    
            if drop_onscreen then
                local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                if distance <= 1000 then
                    local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                    lineesp.From = topCenter
                    lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 17)
                    lineesp.Visible = true
                else
                    lineesp.Visible = false
                end
            else
                lineesp.Visible = false
            end
        else
            lineesp.Visible = false
            lineesp:Remove()
            renderstepped:Disconnect()
        end
    end)
end

for _, drop in ipairs(workspace:GetDescendants()) do
    if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
        esp(drop)
    end
end

workspace.DescendantAdded:Connect(function(drop)
    if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
        esp(drop)
    end
end)
end)

local color1 = tab2.new("color", {
    color = Color3.new(0, 0, 1),
    text = "Color Picker",
})
color1.event:Connect(function(color)
    print("Not finished but the color is" .. BrickColor.new(color.r, color.g, color.b).Name:lower())
end)


local label1 = tab2.new("label", {
    text = "Highlight",
    color = Color3.new(255, 255, 255),
})

local switch1 = tab2.new("switch", {
    text = "Enable";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    if bool then
        while true do
            wait(1)
            for _, a in ipairs(workspace:GetChildren()) do
                if a:FindFirstChild("HumanoidRootPart") and not a:FindFirstChild("Chamse") then
                    if a ~= game:GetService("Workspace").Ignore.FPSArms then
                        local highlight = Instance.new("Highlight")
                        highlight.Adornee = a
                        highlight.Name = "Chamse"
                        highlight.FillColor = Color3.fromRGB(25, 25, 25)
                        highlight.DepthMode = "AlwaysOnTop"
                        highlight.FillTransparency = 0.5  -- Adjust the transparency value as needed
                        highlight.OutlineTransparency = 0
                        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                        highlight.Parent = a

                        table.insert(highlightInstances, highlight)
                    end
                end
            end
        end
    else
        for _, highlight in ipairs(highlightInstances) do
            highlight:Destroy()
        end
        highlightInstances = {}
    end
end)

local color1 = tab2.new("color", {
    color = Color3.new(0, 0, 1),
    text = "Color Picker",
})
color1.event:Connect(function(color)
    print("Not finished but the color is" .. BrickColor.new(color.r, color.g, color.b).Name:lower())
end)

-----------<GUI2>


-----------<GUI3>
local tab1 = window1.new({
    text = "Misc",
})

local label1 = tab1.new("label", {
    text = "Pickup All",
    color = Color3.new(255, 255, 255),
})

local switch1 = tab1.new("switch", {
    text = "Press X to Enable";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local function executeCode()
    for i = 1, 20 do
        local ohNumber1 = 12
        local ohNumber2 = i
        local ohBoolean3 = true
        Players.LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
    end
end

local xKeyPressed = false

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.X then
        xKeyPressed = true
        executeCode()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.X then
        xKeyPressed = false
    end
end)

end)

local label1 = tab1.new("label", {
    text = "Deposit All",
    color = Color3.new(255, 255, 255),
})

local switch1 = tab1.new("switch", {
    text = "Press Z to Enable";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local function executeCode()
    for i = 1, 20 do
        local ohNumber1 = 12
        local ohNumber2 = i
        local ohBoolean3 = false
        Players.LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
    end
end

local zKeyPressed = false

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.Z then
        zKeyPressed = true
        executeCode()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Z then
        zKeyPressed = false
    end
end)

end)


local label1 = tab1.new("label", {
    text = "CrossHair",
    color = Color3.new(255, 255, 255),
})

local switch1 = tab1.new("switch", {
    text = "Enable";
})
switch1.set(false)
switch1.event:Connect(function(bool)
    getgenv().CrosshairSettings = {
        Color = Color3.fromRGB(255,255,255),
        RainbowColor = false,
        Opacity = 1,
        Length = 0, -- Length of each line
        Thickness = 5, -- Thickness of each line
        Offset = 3, -- Offset from the middle point
        Dot = true, -- not recommended
        FollowCursor = true, -- Crosshair follows the cursor
        HideMouseIcon = true, -- Hides the mouse icon, set to 0 to ignore
        HideGameCrosshair = false, -- Hides the current game's crosshair (if its supported)
        ToggleKey = Enum.KeyCode.RightAlt, -- Toggles crosshair visibility
     } -- v1.2.1
     loadstring(game:HttpGet("https://raw.githubusercontent.com/zzerexx/scripts/main/CustomCrosshair.lua", true))()
end)



local button1 = tab1.new("button", {
    text = "Remove Grass",
})
button1.event:Connect(function()
    local LightingEnabled = true
    GrassRemove = true
    if LightingEnabled and GrassRemove == true then
        sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
        elseif LightingEnabled and GrassRemove == false then
        sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
        end

end)

local button1 = tab1.new("button", {
    text = "Remove Fog",
})
button1.event:Connect(function()
    local LightingEnabled = true
    RemoveFogToggle = true
    if LightingEnabled and RemoveFogToggle == true then
        sethiddenproperty(game:GetService("Lighting"), "FogStart", math.huge)
        elseif LightingEnabled and RemoveFogToggle == false then
        sethiddenproperty(game:GetService("Lighting"), "FogStart", 150)
        end
end)

local button1 = tab1.new("button", {
    text = "Remove Clouds",
})
button1.event:Connect(function()
    local LightingEnabled = true
    RemoveCloudsToggle = true
    if LightingEnabled and RemoveCloudsToggle == true then
        sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
        elseif LightingEnabled and RemoveCloudsToggle == false then
        sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
        end
end)
-----------<GUI3>



-----------<HBE>

local HedsOn = Instance.new("Part")
local HBXMaterial = selectedMaterial
HedsOn.Name = "HedsOn"
HedsOn.Anchored = false
HedsOn.CanCollide = false
HedsOn.Transparency = HitboxTransparency
HedsOn.Color = HBXColor
HedsOn.Material = HBXMaterial
HedsOn.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)  -- Set the size of the sphere
HedsOn.Shape = Enum.PartType.Ball  -- Set the shape to a ball
HedsOn.Parent = game.ReplicatedStorage

task.spawn(function()
    while task.wait() do
        if HeadExtends then
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then                        	
                    local BigHeadsPart = Instance.new("Part")
                    BigHeadsPart.Name = selectedTarget
                    BigHeadsPart.Anchored = false
                    BigHeadsPart.CanCollide = false
                    BigHeadsPart.Transparency = HitboxTransparency
                    BigHeadsPart.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)  -- Set the size of the sphere
                    BigHeadsPart.Material = HBXMaterial
                    BigHeadsPart.Color = HBXColor
                    BigHeadsPart.Shape = Enum.PartType.Ball
                    
                
                    local DeletePart = Instance.new("Weld")
                    DeletePart.Parent = BigHeadsPart
                    DeletePart.Name = "FAKEHEAD"
                    
                    local HeadsParts = BigHeadsPart:Clone()
                    HeadsParts.Parent = i
                    HeadsParts.Orientation = i.HumanoidRootPart.Orientation
                    
                    local clonedHedsOn = HedsOn:Clone()
                    clonedHedsOn.Parent = i
                    
                    local Headswelding = Instance.new("Weld")
                    Headswelding.Parent = HeadsParts
                    Headswelding.Part0 = i.HumanoidRootPart
                    Headswelding.Part1 = HeadsParts
                    
                    HeadsParts.Position = i[selectedTarget].Position

                end
            end
        else
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
                    i.HedsOn:Remove()
                    for _, a in ipairs(i:GetChildren()) do
                      if (selectedTarget == "Head" or selectedTarget == "Torso") and a.Name == selectedTarget and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                            a:Remove()
                        end
                    end
                end
            end
        end
    end
end)

-----------<HBE>

