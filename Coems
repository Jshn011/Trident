loadstring(game:HttpGet("https://pastebin.com/raw/M6prETZJ", true))()

-- Demontime (COEMS lib version) 

-----------<WorldViusal LOCALS>

local IronColor = Color3.new(1, 1, 1)
local StoneColor = Color3.new(1, 1, 1)
local NitrateColor = Color3.new(1, 1, 1)
local PartBoxColor = Color3.new(1, 1, 1)
local VendingMachineColor = Color3.new(1, 1, 1)
local MetalCrateColor = Color3.new(1, 1, 1)
local ClaimTotemColor = Color3.new(1, 1, 1)
local RespawnTotemColor = Color3.new(1, 1, 1)
local SmallBoxColor = Color3.new(1, 1, 1)
local MediumBoxColor = Color3.new(1, 1, 1)
local CabinetColor = Color3.new(1, 1, 1)
local maxDistance = 500

-----------<WorldViusal LOCALS>

-----------------------------------<ORESBLABLABLABLAORES>--------------------------------

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Burlap") and part.Material == Enum.Material.Slate then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Iron Ore]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = IronColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function IronToggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Burlap") and child.Material == Enum.Material.Slate then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Burlap") and child.Material == Enum.Material.Slate then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)



------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Flint") and part.Material == Enum.Material.Limestone then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 1 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Stone Ore]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = StoneColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function StonetoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Flint") and child.Material == Enum.Material.Limestone then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Flint") and child.Material == Enum.Material.Limestone then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Institutional white") and part.Material == Enum.Material.Slate then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() > 0 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Nitrate Ore]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = NitrateColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function NitratetoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Institutional white") and child.Material == Enum.Material.Slate then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Institutional white") and child.Material == Enum.Material.Slate then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Cashmere") and part.Material == Enum.Material.Plastic then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Part Box]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = PartBoxColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function PartBoxtoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("UnionOperation") and child.BrickColor == BrickColor.new("Cashmere") and child.Material == Enum.Material.Plastic then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("UnionOperation") and child.BrickColor == BrickColor.new("Cashmere") and child.Material == Enum.Material.Plastic then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("UnionOperation") and part.BrickColor == BrickColor.new("Medium brown") and part.Material == Enum.Material.Plastic then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 12 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Vending Machine]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = VendingMachineColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function VendingMachinetoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("UnionOperation") and child.BrickColor == BrickColor.new("Medium brown") and child.Material == Enum.Material.Plastic then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("UnionOperation") and child.BrickColor == BrickColor.new("Medium brown") and child.Material == Enum.Material.Plastic then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("MeshPart") and part.BrickColor == BrickColor.new("Silver flip/flop") and part.Material == Enum.Material.Metal then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 2 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Military Crate]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = MetalCrateColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function MetalCratetoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Silver flip/flop") and child.Material == Enum.Material.Metal then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("MeshPart") and child.BrickColor == BrickColor.new("Silver flip/flop") and child.Material == Enum.Material.Metal then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("Part") and part.BrickColor == BrickColor.new("Dark blue") and part.Material == Enum.Material.Neon then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 5 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Claim Totem]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = ClaimTotemColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function ClaimTotemtoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Dark blue") and child.Material == Enum.Material.Neon then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Dark blue") and child.Material == Enum.Material.Neon then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("Part") and part.BrickColor == BrickColor.new("Gun metallic") and part.Material == Enum.Material.Wood then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 10 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Cabinet]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = CabinetColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function CabinettoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Gun metallic") and child.Material == Enum.Material.Wood then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Gun metallic") and child.Material == Enum.Material.Wood then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("Part") and part.BrickColor == BrickColor.new("Dark stone grey") and part.Material == Enum.Material.Slate then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 4 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Respawn Totem]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = RespawnTotemColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function RespawnTotemtoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Dark stone grey") and child.Material == Enum.Material.Slate then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Dark stone grey") and child.Material == Enum.Material.Slate then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("Part") and part.BrickColor == BrickColor.new("Linen") and part.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(3.25, 2, 2.25) then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 3 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Small Box]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = SmallBoxColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function SmallBoxtoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Linen") and child.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(3.25, 2, 2.25) then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Linen") and child.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(3.25, 2, 2.25) then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]

local TCESPs = {}
local adorned = false

local function calculateDistance(part)
    local camera = game.Workspace.CurrentCamera
    if camera and camera:IsA("Camera") then
        local cameraPosition = camera.CFrame.Position
        local partPosition = part.Position
        return (cameraPosition - partPosition).Magnitude
    end
    return math.huge -- Return a very large value if the camera is not available
end

local function addAdornments()
    local parts = workspace:GetDescendants()
    local partsToRemove = {} -- Store parts to remove ESPs from
    for _, part in ipairs(parts) do
        if part:IsA("Part") and part.BrickColor == BrickColor.new("Linen") and part.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(6, 2.5, 2.75) then
            local parent = part.Parent
            if parent and parent:IsA("Model") and #parent:GetChildren() == 3 then
                local distance = calculateDistance(part)
                if distance <= maxDistance then
                    local isAdorned = false
                    for _, billboardGui in ipairs(TCESPs) do
                        if billboardGui.Adornee == part then
                            isAdorned = true
                            break
                        end
                    end
                    if not isAdorned then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Size = UDim2.new(0, 100, 0, 50) -- Adjust the size as needed
                        billboardGui.AlwaysOnTop = true
                        billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Adjust the offset as needed
                        billboardGui.Adornee = part
                        billboardGui.Parent = part

                        local textLabel = Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = "[Medium Box]" -- Replace with the desired text
                        textLabel.Font = Enum.Font.SourceSans
                        textLabel.TextColor3 = MediumBoxColor
                        textLabel.TextSize = 15 -- Set the text size to 15
                        textLabel.Parent = billboardGui

                        table.insert(TCESPs, billboardGui)
                    end
                else
                    table.insert(partsToRemove, part)
                end
            end
        end
    end
    for _, partToRemove in ipairs(partsToRemove) do
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == partToRemove then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end

local function MediumBoxtoggleAdornments()
    adorned = not adorned
    if adorned then
        addAdornments()
    else
        for _, billboardGui in ipairs(TCESPs) do
            billboardGui:Destroy()
        end
        TCESPs = {}
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if adorned then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Linen") and child.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(6, 2.5, 2.75) then
        addAdornments()
    end
end)

game:GetService("Workspace").ChildRemoved:Connect(function(child)
    if adorned and child:IsA("Part") and child.BrickColor == BrickColor.new("Linen") and child.Material == Enum.Material.WoodPlanks and part.Size == Vector3.new(6, 2.5, 2.75) then
        for i, billboardGui in ipairs(TCESPs) do
            if billboardGui.Adornee == child then
                billboardGui:Destroy()
                table.remove(TCESPs, i)
                break
            end
        end
    end
end)


------------------------------------------------------------------------------------[][][][][]











local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'THIS SCRIPT HAS A VIRUS',
    Center = true,
    AutoShow = true,
    TabPadding = 0,
    MenuFadeTime = 0
})






------// LPH >--------------------------------

function LPH_JIT_ULTRA(f)
	return f
	end
	function LPH_JIT_MAX(f)
	return f
	end  

	if not LPH_OBFUSCATED then
		LPH_JIT = function(...) return ... end
		LPH_JIT_MAX = function(...) return ... end
		LPH_JIT_ULTRA = function(...) return ... end
		LPH_NO_VIRTUALIZE = function(...) return ... end
		LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
		LPH_ENCSTR = function(...) return ... end
		LPH_STRENC = function(...) return ... end
		LPH_HOOK_FIX = function(...) return ... end
		LPH_CRASH = function() return print(debug.traceback()) end
	end

------// LPH >--------------------------------


    
--< Bypasses >--------------------------------
	
	local antihitbox
	antihitbox = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Size" and self.Name == "Head" then
		return 1.672248125076294, 0.835624098777771, 0.835624098777771
	end
	return antihitbox(...)
	end))
	local antixray
	antixray = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
	local self, k = ...
	if not checkcaller() and k == "Hitbox" and self.Name == "Transparency" then
		return 1
	end
	return antixray(...)
	end))
	local mt = getrawmetatable(game)
	make_writeable(mt)
	local old_index = mt.__index
	mt.__index = function(a,b)
	if tostring(a) == "Workspace" then
		if tostring(b) == "Gravity" then
			return 75;
		end
	end
	return old_index(a, b)
end    
local antilongneck
antilongneck = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
local self, k = ...
if not checkcaller() and k == "PrismaticConstraint" and self.Name == "LowerLimit" then
    return 1.75
end
return antilongneck(...)
end))
local antilongneck2
antilongneck2 = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(...)
local self, k = ...
if not checkcaller() and k == "PrismaticConstraint" and self.Name == "UpperLimit" then
    return 3
end
return antilongneck2(...)
end))

--< Bypasses >--------------------------------








local Tabs = {
    Main = Window:AddTab('Main'),
}

local TabBox = Tabs.Main:AddLeftTabbox()


-----------<HBE LOCALS>

local HeadExtends = false

local Radius = 6

local TargetOptions = {
    ["Head"] = "Head",
    ["Torso"] = "Torso",
}
local selectedTarget = TargetOptions["Head"]

local HBXColor = Color3.new(1, 1, 1)

local TargetMaterial = {
    ["Plastic"] = Enum.Material.Plastic, 
    ["Wood"] = Enum.Material.Wood,
    ["Slate"] = Enum.Material.Slate,
    ["Concrete"] = Enum.Material.Concrete,
    ["CorrodedMetal"] = Enum.Material.CorrodedMetal,
    ["DiamondPlate"] = Enum.Material.DiamondPlate,
    ["Foil"] = Enum.Material.Foil,
    ["Grass"] = Enum.Material.Grass,
    ["Ice"] = Enum.Material.Ice,
    ["Marble"] = Enum.Material.Marble,
    ["Granite"] = Enum.Material.Granite,
    ["Brick"] = Enum.Material.Brick,
    ["Pebble"] = Enum.Material.Pebble,
    ["Sand"] = Enum.Material.Sand,
    ["Fabric"] = Enum.Material.Fabric,
    ["SmoothPlastic"] = Enum.Material.SmoothPlastic,
    ["Metal"] = Enum.Material.Metal,
    ["WoodPlanks"] = Enum.Material.WoodPlanks,
    ["Neon"] = Enum.Material.Neon,
    ["Cobblestone"] = Enum.Material.Cobblestone,
    ["Glass"] = Enum.Material.Glass,
    ["Asphalt"] = Enum.Material.Asphalt,
    ["LeafyGrass"] = Enum.Material.LeafyGrass,
    ["Salt"] = Enum.Material.Salt,
    ["Limestone"] = Enum.Material.Limestone,
    ["Basalt"] = Enum.Material.Basalt,
    ["ForceField"] = Enum.Material.ForceField,
}
local selectedMaterial = TargetMaterial["ForceField"]

local TargetShape = {
    ["Ball"] = Enum.PartType.Ball, 
    ["Cube"] = Enum.PartType.Block,
    ["Cylinder"] = Enum.PartType.Cylinder,
}
local selectedShape = TargetShape["Ball"]

local HitboxTransparency = 0.5

local HBXH = false
local SizeX = 10
local SizeY = 10
local SizeZ = 10
local TransHead = 0
local ColorBRUH = Color3.fromRGB(80,77,56)

-----------<HBE LOCALS>

-----------<HBE Function>

local HedsOn = Instance.new("Part")
HedsOn.Name = "HedsOn"
HedsOn.Anchored = false
HedsOn.CanCollide = false
HedsOn.Transparency = HitboxTransparency
HedsOn.Color = HBXColor
HedsOn.Material = selectedMaterial
HedsOn.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)  
HedsOn.Shape = selectedShape or Enum.PartType.Ball
HedsOn.Parent = game.ReplicatedStorage

task.spawn(function()
    while task.wait() do
        if HeadExtends then
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then                        	
                    local BigHeadsPart = Instance.new("Part")
                    BigHeadsPart.Name = selectedTarget
                    BigHeadsPart.Anchored = false
                    BigHeadsPart.CanCollide = false
                    BigHeadsPart.Transparency = HitboxTransparency
                    BigHeadsPart.Size = Vector3.new(Radius * 2, Radius * 2, Radius * 2)
                    BigHeadsPart.Material = selectedMaterial or Enum.Material.ForceField
                    BigHeadsPart.Color = HBXColor
                    BigHeadsPart.Shape = selectedShape or Enum.PartType.Ball
                    
                
                    local DeletePart = Instance.new("Weld")
                    DeletePart.Parent = BigHeadsPart
                    DeletePart.Name = "FAKEHEAD"
                    
                    local HeadsParts = BigHeadsPart:Clone()
                    HeadsParts.Parent = i
                    HeadsParts.Orientation = i.HumanoidRootPart.Orientation
                    
                    local clonedHedsOn = HedsOn:Clone()
                    clonedHedsOn.Parent = i
                    
                    local Headswelding = Instance.new("Weld")
                    Headswelding.Parent = HeadsParts
                    Headswelding.Part0 = i.HumanoidRootPart
                    Headswelding.Part1 = HeadsParts
                    
                    HeadsParts.Position = i[selectedTarget].Position

                end
            end
        else
            for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
                if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
                    i.HedsOn:Remove()
                    for _, a in ipairs(i:GetChildren()) do
                      if (selectedTarget == "Head" or selectedTarget == "Torso") and a.Name == selectedTarget and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                            a:Remove()
                        end
                    end
                end
            end
        end
    end
end)

-----------<HBE Function>


local Tab1 = TabBox:AddTab('Hitbox Expander')

local EnableHBX = Tab1:AddToggle('Enable', {
    Text = 'Enable',
    Default = false, 
    Tooltip = 'Enable hitbox expander', 
    
    Callback = function(HBEON)
        HeadExtends = HBEON 
    end
})

EnableHBX:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Hitbox Color', 
    Transparency = 0, 

    Callback = function(HBECOLOR)
        HBXColor = Color3.new(HBECOLOR.r, HBECOLOR.g, HBECOLOR.b)
    end
})


Tab1:AddDropdown('TargetDropdown', {
    Values = { 'Head', 'Torso' },
    Default = 1,
    Multi = false, 

    Text = 'Part',
    Tooltip = 'Part on which will be expanded', 

    Callback = function(HBETRAGET)
        selectedTarget = TargetOptions[HBETRAGET]
    end
})

Tab1:AddDropdown('MaterialDropdown', {
    Values = { "ForceField", "Neon", "Plastic", "Metal", "Wood", "Slate", "Concrete", "Foil", "DiamondPlate", "CorrodedMetal", "Grass", "Ice", "Marble", "Granite", "Brick", "Pebble", "Sand", "Fabric", "SmoothPlastic", "WoodPlanks", "Cobblestone", "Glass", "Asphalt", "LeafyGrass", "Salt", "Limestone", "Basalt" },
    Default = 1, 
    Multi = false, 

    Text = 'Material',
    Tooltip = 'Material of the hitbox', 

    Callback = function(HBEMATERIAL)
        selectedMaterial = TargetMaterial[HBEMATERIAL]
    end
})

Tab1:AddDropdown('ShapeDropdown', {
    Values = { 'Ball', 'Cube', 'Cylinder' },
    Default = 1, 
    Multi = false, 

    Text = 'Shape',
    Tooltip = 'Shape of the hitbox', 

    Callback = function(HBESHAPE)
        selectedShape = TargetShape[HBESHAPE]
    end
})


Tab1:AddSlider('TransparencySlider', {
    Text = 'Transparency',
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 1,
    Compact = false,

    Callback = function(HBETRANS)
        HitboxTransparency = HBETRANS
    end
})


Tab1:AddSlider('HitboxSlider', {
    Text = 'Size',
    Default = 6,
    Min = 1,
    Max = 12,
    Rounding = 1,
    Compact = false,

    Callback = function(HBESIZE)
        Radius = HBESIZE
    end
})


local Tab2 = TabBox:AddTab('Head Expander')

local ENABLEBRUH = Tab2:AddToggle('Enable', {
    Text = 'Enable',
    Default = false, 
    Tooltip = 'Enable head expander', 

    Callback = function(HBEON2)
        HBXH = HBEON2
        local function AdjustHeadSize(i)
            if i:FindFirstChild("HumanoidRootPart") then
                if HBXH then
                    i.Head.Size = Vector3.new(SizeX, SizeY, SizeZ)
                    i.Head.Transparency = TransHead
                    i.Head.Color = ColorBRUH
                    i.Head.CanCollide = false
                else
                    i.Head.Size = Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
                    i.Head.Transparency = 0
                    i.Head.Color = Color3.fromRGB(80,77,56)
                    i.Head.CanCollide = true
                end
            end
        end
        
        workspace.ChildAdded:Connect(function(child)
            AdjustHeadSize(child)
        end)
        
        for _, existingChild in pairs(workspace:GetChildren()) do
            AdjustHeadSize(existingChild)
        end
    end
})


ENABLEBRUH:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Color', 
    Transparency = 0, 

    Callback = function(BRUHGYAT)
        ColorBRUH = Color3.new(BRUHGYAT.r, BRUHGYAT.g, BRUHGYAT.b)
    end
})


Tab2:AddSlider('TransHeadLOL', {
    Text = 'Transparency',
    Default = 0,
    Min = 0,
    Max = 1,
    Rounding = 1,
    Compact = false,

    Callback = function(LOLGAY)
        TransHead = LOLGAY
    end
})

Tab2:AddSlider('HitboxSliderX', {
    Text = 'Size X',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = true,

    Callback = function(SX)
        SizeX = SX
    end
})

Tab2:AddSlider('HitboxSliderY', {
    Text = 'Size Y',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = true,

    Callback = function(SY)
        SizeY = SY
    end
})

Tab2:AddSlider('HitboxSliderZ', {
    Text = 'Size Z',
    Default = 10,
    Min = 1,
    Max = 12,
    Rounding = 0,
    Compact = true,

    Callback = function(SZ)
        SizeZ = SZ
    end
})




local TabBox4 = Tabs.Main:AddLeftTabbox() 


local PMTab1 = TabBox4:AddTab('Player Misc')

PMTab1:AddLabel('Loot All'):AddKeyPicker('KeyPicker', {

    Default = 'Non',
    SyncToggleState = false,

    Mode = 'Toggle', -- Modes: Always, Toggle, Hold

    Text = 'Loot All', 
    NoUI = false, 

    Callback = function(Value)
        for i = 1, 20 do
            local ohNumber1 = 12
            local ohNumber2 = i
            local ohBoolean3 = true
            game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
            end
    end,

        ChangedCallback = function(New)
            
        end
    })


    
PMTab1:AddLabel('Deposit All'):AddKeyPicker('KeyPicker', {

        Default = 'Non',
        SyncToggleState = false,
    
        Mode = 'Toggle', -- Modes: Always, Toggle, Hold
    
        Text = 'Deposit All', 
        NoUI = false, 
    
        Callback = function(Value)
            for i = 1, 20 do
                local ohNumber1 = 12
                local ohNumber2 = i
                local ohBoolean3 = false
                game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
                end
        end,

        
    ChangedCallback = function(New)
        
    end
})


PMTab1:AddLabel('Auto Bhop'):AddKeyPicker('KeyPicker', {

    Default = 'Non',
    SyncToggleState = false,

    Mode = 'Toggle', -- Modes: Always, Toggle, Hold

    Text = 'Bhop', 
    NoUI = false, 

    Callback = function(Value)
keypress(0x57)
keypress(0x10)
wait(0.05)
keypress(0x43)
keypress(0x20)
keyrelease(0x20)
wait(0.5)
keyrelease(0x43)
    end,

    
ChangedCallback = function(New)
    
end
})



local TabBox9 = Tabs.Main:AddRightTabbox() 
local PMPTab1 = TabBox9:AddTab('Player Custom')


local function setArmProperties(property, value)
    local armParts = {"LeftUpperArm", "LeftLowerArm", "LeftHand","RightUpperArm", "RightLowerArm", "RightHand"}
    for _, partName in ipairs(armParts) do
    game:GetService("Workspace").Ignore.FPSArms[partName][property] = value
    end
    end
    
    PMPTab1:AddToggle('ArmChams', { Text = 'Custom Arm', Default = false }):AddColorPicker('ArmChamsColor', { Default = Color3.fromRGB(80, 77, 56), Title = 'Color' }):OnChanged(function(Value)
    if Value == true then
    elseif Value == false then
    setArmProperties("Color", Color3.fromRGB(80, 77, 56))
    setArmProperties("Material", "SmoothPlastic")
    setArmProperties("Transparency", 0)
    end
    end)
    Options.ArmChamsColor:OnChanged(function(Value)
    setArmProperties("Color", Value)
    end)
    
    PMPTab1:AddDropdown('ArmChamsMaterial', {Values = { "SmoothPlastic", "ForceField", "Neon", "Plastic", "Metal", "Wood", "Slate", "Concrete", "Foil", "DiamondPlate", "CorrodedMetal", "Grass", "Ice", "Marble", "Granite", "Brick", "Pebble", "Sand", "Fabric", "WoodPlanks", "Cobblestone", "Glass", "Asphalt", "LeafyGrass", "Salt", "Limestone", "Basalt" },Default = 1,Multi = false,Text = 'Material'}):OnChanged(function(Value)
    setArmProperties("Material", Value)
    end)

    PMPTab1:AddSlider('UGYEBEY', {
        Text = 'Transparency',
        Default = 0,
        Min = 0,
        Max = 1,
        Rounding = 1,
        Compact = false,
    
        Callback = function(Value)
            setArmProperties("Transparency", Value)
        end
    })
    

        local replicatedStorageLOL = game:GetService("ReplicatedStorage")
        local handModelsLOL = replicatedStorageLOL:WaitForChild("HandModels")
        local materialLOL = Enum.Material.ForceField
        local colorLOL = Color3.new(1, 1, 1)
        local transparencyGUNLOL = 0


    
    local CUSTOMBRUHWEAPON = PMPTab1:AddToggle('Enable', {
        Text = 'Custom Weapon',
        Default = false, 
        Tooltip = '', 
        
        Callback = function(LOL)
    
          for _, part in pairs(handModelsLOL:GetDescendants()) do
            if part:IsA("BasePart") then
            part.Material = materialLOL
            part.Color = colorLOL
            part.Transparency = transparencyGUNLOL
        end
    end
    
        end
    })
    
    CUSTOMBRUHWEAPON:AddColorPicker('ColorPicker', {
        Default = Color3.new(1, 1, 1), 
        Title = 'Hitbox Color', 
        Transparency = 0, 
    
        Callback = function(WEAPONCOLRR)
            colorLOL = Color3.new(WEAPONCOLRR.r, WEAPONCOLRR.g, WEAPONCOLRR.b)
        end
    })
    
    
    PMPTab1:AddDropdown('MaterialDropdown', {
        Values = { "ForceField", "Neon", "Plastic", "Metal", "Wood", "Slate", "Concrete", "Foil", "DiamondPlate", "CorrodedMetal", "Grass", "Ice", "Marble", "Granite", "Brick", "Pebble", "Sand", "Fabric", "SmoothPlastic", "WoodPlanks", "Cobblestone", "Glass", "Asphalt", "LeafyGrass", "Salt", "Limestone", "Basalt" },
        Default = 1, 
        Multi = false, 
    
        Text = 'Material',
        Tooltip = '', 
    
        Callback = function(MATERIALWTFWEAPONS)
            materialLOL = TargetMaterial[MATERIALWTFWEAPONS]
        end
    })
    
    PMPTab1:AddSlider('BRUHLOLOLAUHSUH', {
        Text = 'Transparency',
        Default = 0,
        Min = 0,
        Max = 1,
        Rounding = 1,
        Compact = false,
    
        Callback = function(JKJKJKJKJK)
            transparencyGUNLOL = JKJKJKJKJK
        end
    })
    
    PMPTab1:AddDivider()
    
    
    PMPTab1:AddLabel('Health Color'):AddColorPicker('Health_Color_Value', { Default = Color3.fromRGB(78,153,74)})
    Options.Health_Color_Value:OnChanged(function(Health_Color_Value)
    game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundColor3 = Health_Color_Value
    end)
    
    
    PMPTab1:AddLabel('Energy Color'):AddColorPicker('Energy_Color_Value', { Default = Color3.fromRGB(197,187,40)})
    Options.Energy_Color_Value:OnChanged(function(Energy_Color_Value)
    game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundColor3 = Energy_Color_Value
    end)
    
    
    PMPTab1:AddLabel('Inventory Color'):AddColorPicker('Inventory_Color', { Default = Color3.fromRGB(80,80,80)})
    Options.Inventory_Color:OnChanged(function(Inventory_Color_Value)
    local hotbar = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter
    for i = 26, 29 do
    hotbar.Armor["ItemSlot" .. i].BackgroundColor3 = Inventory_Color_Value
    end
    for i = 6, 25 do
    hotbar.Inventory["ItemSlot" .. i].BackgroundColor3 = Inventory_Color_Value
    end 
    for i = 1, 5 do
    hotbar.Hotbar["ItemSlot" .. i].BackgroundColor3 = Inventory_Color_Value
    end 
    end)


    PMPTab1:AddDivider()


    local SoundService = game:GetService("SoundService")

    SoundService.PlayerHitHeadshot.Volume = 0
    SoundService.PlayerHitHeadshot.Pitch = 1
    SoundService.PlayerHitHeadshot.EqualizerSoundEffect.HighGain = -1.5
    local sounds = {["Defualt Headshot"] = "rbxassetid://9119561046",["Defualt Body"] = "rbxassetid://9114487369",Neverlose = "rbxassetid://8726881116",Gamesense = "rbxassetid://4817809188",One = "rbxassetid://7380502345",Bell = "rbxassetid://6534947240",Rust = "rbxassetid://1255040462",TF2 = "rbxassetid://2868331684",Slime = "rbxassetid://6916371803",["Among Us"] = "rbxassetid://5700183626",Minecraft = "rbxassetid://4018616850",["CS:GO"] = "rbxassetid://6937353691",Saber = "rbxassetid://8415678813",Baimware = "rbxassetid://3124331820",Osu = "rbxassetid://7149255551",["TF2 Critical"] = "rbxassetid://296102734",Bat = "rbxassetid://3333907347",["Call of Duty"] = "rbxassetid://5952120301",Bubble = "rbxassetid://6534947588",Pick = "rbxassetid://1347140027",Pop = "rbxassetid://198598793",Bruh = "rbxassetid://4275842574",Bamboo = "rbxassetid://3769434519",Crowbar = "rbxassetid://546410481",Weeb = "rbxassetid://6442965016",Beep = "rbxassetid://8177256015",Bambi = "rbxassetid://8437203821",Stone = "rbxassetid://3581383408",["Old Fatality"] = "rbxassetid://6607142036",Click = "rbxassetid://8053704437",Ding = "rbxassetid://7149516994",Snow = "rbxassetid://6455527632",Laser = "rbxassetid://7837461331",Mario = "rbxassetid://2815207981",Steve = "rbxassetid://4965083997"}
    
    
    
    
    PMPTab1:AddToggle('Enabled_Toggle1', {Text = 'Headshot Hitsound', Default = false})
    
    PMPTab1:AddDropdown('HeadshotHit', {Values = { 'Defualt Headshot','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Select'})
    Options.HeadshotHit:OnChanged(function()
    local soundId = sounds[Options.HeadshotHit.Value]
    game:GetService("SoundService").PlayerHitHeadshot.SoundId = soundId
    game:GetService("SoundService").PlayerHitHeadshot.Playing = true
    end)
    

    --
    PMPTab1:AddToggle('Enabled_Toggle2', {Text = 'Bodyshot Hitsound', Default = false})
    
    PMPTab1:AddDropdown('Hit', {Values = { 'Defualt Body','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Select'})
    Options.Hit:OnChanged(function()
    local soundId = sounds[Options.Hit.Value]
    game:GetService("SoundService").PlayerHit2.SoundId = soundId
    game:GetService("SoundService").PlayerHit2.Playing = true
    end)
    



    local PMPTab2 = TabBox9:AddTab('Settings')

    PMPTab2:AddButton('Reset Colors', function()
        game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundColor3 = Color3.fromRGB(78,153,74)
        game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundColor3 = Color3.fromRGB(197,187,40)

        local hotbar = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter
        for i = 26, 29 do
        hotbar.Armor["ItemSlot" .. i].BackgroundColor3 = Color3.fromRGB(80,80,80)
    end
        for i = 6, 25 do
        hotbar.Inventory["ItemSlot" .. i].BackgroundColor3 = Color3.fromRGB(80,80,80)
    end 
        for i = 1, 5 do
        hotbar.Hotbar["ItemSlot" .. i].BackgroundColor3 = Color3.fromRGB(80,80,80)
    end 
    end)

    PMPTab2:AddSlider('Volume_Slider', {Text = 'Headshot Volume', Default = 0, Min = 0, Max = 10, Rounding = 0, Compact = false,}):OnChanged(function(vol)
        SoundService.PlayerHitHeadshot.Volume = vol
        end)
        
    PMPTab2:AddSlider('Pitch_Slider', {Text = 'Headshot Pitch', Default = 1, Min = 0, Max = 2, Rounding = 2, Compact = false,}):OnChanged(function(pich)
        SoundService.PlayerHitHeadshot.Pitch = pich
        end)

PMPTab2:AddDivider()

    PMPTab2:AddSlider('Volume_Slider', {Text = 'Bodyshot Volume', Default = 0, Min = 0, Max = 10, Rounding = 0, Compact = false,}):OnChanged(function(vole)
        SoundService.PlayerHit2.Volume = vole
        end)
            
    PMPTab2:AddSlider('Pitch_Slider', {Text = 'Bodyshot Pitch', Default = 1, Min = 0, Max = 2, Rounding = 2, Compact = false,}):OnChanged(function(piche)
        SoundService.PlayerHit2.Pitch = piche
        end)


local VisualsTabBox = Tabs.Main:AddLeftTabbox('Crosshair')
local CrosshairXTab = VisualsTabBox:AddTab('Crosshair')

local Camera = game:GetService("Workspace").Camera
local Camera = game:GetService("Workspace").CurrentCamera
local Cam = game:GetService("Workspace").Camera

        --* Crosshair *--
        
        local CrossHairX = Drawing.new("Circle"), Drawing.new("Circle")
        --
        CrossHairX.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        CrossHairX.Thickness = 1
        CrossHairX.ZIndex = 3
        
        do
        CrosshairXTab:AddToggle('zCrosshairX_Toggle', {Text = 'Enable', Default = false}):AddColorPicker("eCrosshairX_Color", {Default = Color3.fromRGB(208, 123, 255)}):OnChanged(function()
        CrossHairX.Visible = Toggles.zCrosshairX_Toggle.Value
        end)
        
        Options.eCrosshairX_Color:OnChanged(function()
        CrossHairX.Color = Options.eCrosshairX_Color.Value
        end)
        
        CrosshairXTab:AddToggle('Crosshair_Filled1', {Text = 'Filled', Default = false}):OnChanged(function()
        CrossHairX.Filled = Toggles.Crosshair_Filled1.Value
        end)
        
        CrosshairXTab:AddSlider('Crosshair_Radius', {Text = 'Size', Suffix = "", Default = 2, Min = 0, Max = 100, Rounding = 0, Compact = true}):OnChanged(function(CrosshairXRadius)
        CrossHairX.Radius = CrosshairXRadius
        end)
        end


local Tabs = {
    Main = Window:AddTab('Visual'),

}


local TabBox2 = Tabs.Main:AddLeftTabbox() 


-----------<Visual LOCALS>

local ArmorColor = Color3.new(0, 1, 0)
local SleeperColor = Color3.new(0, 0, 1)
local distanceview = 800
local WepsColor = Color3.new(1, 1, 1)
local wallcheck = false
local TeamCheck = false
local WallColor = Color3.new(1, 0, 0)
local TeamCheColor = Color3.new(1, 1, 0)
local PlayerText = " Player "

-----------<Viusal LOCALS>


local VTab1 = TabBox2:AddTab('Player Visuals')

local PlayerLOC = VTab1:AddToggle('Player', {
    Text = 'Player',
    Default = false, 
    Tooltip = 'Shows "Player" text esp', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function Playeresp(drop)
            local dropesp = Drawing.new("Text")
            dropesp.Visible = false
            dropesp.Center = true
            dropesp.Outline = true
            dropesp.Font = 2
            dropesp.Size = 15
        
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
        
                    -- Calculate distance to humanoid
                    local distance = (drop.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
        
                    if drop_onscreen and distance <= distanceview then
                        if wallcheck then
                            -- Raycast to check for obstructions
                            local raycastParams = RaycastParams.new()
                            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                            raycastParams.FilterDescendantsInstances = { drop }
                            local raycastResult = workspace:Raycast(
                                camera.CFrame.Position,
                                drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                raycastParams
                            )
        
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = PlayerText
        
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                if not raycastResult then
                                    if TeamCheck then
                                        -- Check for Dot
                                        local head = drop:FindFirstChild("Head")
                                        local dot = head and head:FindFirstChild("Dot")
        
                                        if dot and dot:IsA("BillboardGui") and dot.Enabled then
                                            dropesp.Color = TeamCheColor -- Yellow color for players with enabled Dot
                                        else
                                            dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                        end
                                    else
                                        dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    end
                                else
                                    dropesp.Color = WallColor -- Red color for obstructed players
                                end
                            end
                        else
                            dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y)
                            dropesp.Text = PlayerText
        
                            -- Check if the player is sleeping and set the text color
                            if IsSleeping(drop) then
                                dropesp.Color = SleeperColor -- White color for sleeping players
                            else
                                dropesp.Color = ArmorColor -- Green color for players
                            end
                        end
        
                        dropesp.Visible = true
                    else
                        dropesp.Visible = false
                    end
                else
                    dropesp.Visible = false
                    dropesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for i, drop in next, workspace:GetChildren() do
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end
        
        workspace.ChildAdded:Connect(function(drop)
            if drop.Name == "Model" then
                if drop:FindFirstChild("HumanoidRootPart") then
                    Playeresp(drop)
                end
            end
        end)
        
    end
})


local HighlightLOC = VTab1:AddToggle('Highlight', {
    Text = 'Highlight',
    Default = false, 
    Tooltip = 'Show players in highlight', 

    Callback = function(Value)
        if true then
            while true do
               wait(1)
               for i, a in ipairs(workspace:GetChildren()) do
                  if a:FindFirstChild("HumanoidRootPart") then
                     if not a:FindFirstChild("Chamse") then
                        if a ~= game:GetService("Workspace").Ignore.FPSArms then
                           local b = Instance.new("Highlight", a)
                           b.Adornee = a
                           b.Name = "Chamse"
                           b.FillColor = Color3.fromRGB(25,25,25)
                           b.DepthMode = "AlwaysOnTop"
                           b.FillTransparency = 1
                           b.OutlineTransparency = 0  
                           b.OutlineColor = Color3.fromRGB(255,255,255)
                        end
                     end
                  end
               end
            end
            end
    end
})



local ArmorLOC = VTab1:AddToggle('Armor', {
    Text = 'Armor',
    Default = false, 
    Tooltip = 'Show players armors', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")
        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function espArmor(drop)
            local armorNameLabel = Drawing.new("Text")
            armorNameLabel.Visible = false
            armorNameLabel.Center = true
            armorNameLabel.Outline = true
            armorNameLabel.Font = 2
            armorNameLabel.Size = 15
        
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
        
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            local armorFolder = drop.Armor and drop.Armor:FindFirstChildOfClass("Folder")
                            if armorFolder then
                                local armorName = armorFolder.Name
                                if armorName == "WoodHelmet" or armorName == "WoodChestplate" or armorName == "WoodLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[WoodArmor]"
                                elseif armorName == "RiotHelmet" or armorName == "RiotChestplate" or armorName == "RiotLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[RiotArmor]"
                                elseif armorName == "SteelHelmet" or armorName == "SteelChestplate" or armorName == "SteelLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[SteelArmor]"
                                elseif armorName == "IronHelmet" or armorName == "IronChestplate" or armorName == "IronLeggings" then
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[IronArmor]"
                                else
                                    armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                    armorNameLabel.Text = "[None]"
                                end
        
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = { drop }
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
        
                                        if not raycastResult then
                                            if TeamCheck then
                                                -- Check for Dot
                                                local head = drop:FindFirstChild("Head")
                                                local dot = head and head:FindFirstChild("Dot")
        
                                                if dot and dot:IsA("BillboardGui") and dot.Enabled then
                                                    armorNameLabel.Color = TeamCheColor -- Yellow color for players with enabled Dot
                                                else
                                                    armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                                end
                                            else
                                                armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                            end
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
        
                                armorNameLabel.Visible = true
                            else
                                armorNameLabel.Position = Vector2.new(drop_pos.X, drop_pos.Y) - Vector2.new(0, -30)
                                armorNameLabel.Text = "[None]"
        
                                -- Check if the player is sleeping and set the text color
                                if IsSleeping(drop) then
                                    armorNameLabel.Color = SleeperColor -- White color for sleeping players
                                else
                                    if wallcheck then
                                        -- Raycast to check for obstructions
                                        local raycastParams = RaycastParams.new()
                                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                        raycastParams.FilterDescendantsInstances = { drop }
                                        local raycastResult = workspace:Raycast(
                                            camera.CFrame.Position,
                                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                            raycastParams
                                        )
        
                                        if not raycastResult then
                                            if TeamCheck then
                                                -- Check for Dot
                                                local head = drop:FindFirstChild("Head")
                                                local dot = head and head:FindFirstChild("Dot")
        
                                                if dot and dot:IsA("BillboardGui") and dot.Enabled then
                                                    armorNameLabel.Color = TeamCheColor -- Yellow color for players with enabled Dot
                                                else
                                                    armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                                end
                                            else
                                                armorNameLabel.Color = ArmorColor -- Green color for unobstructed and awake players
                                            end
                                        else
                                            armorNameLabel.Color = WallColor -- Red color for obstructed players
                                        end
                                    else
                                        armorNameLabel.Color = ArmorColor -- Green color for players
                                    end
                                end
        
                                armorNameLabel.Visible = true
                            end
                        else
                            armorNameLabel.Visible = false
                        end
                    else
                        armorNameLabel.Visible = false
                    end
                else
                    armorNameLabel.Visible = false
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                espArmor(drop)
            end
        end)
        
    end
})


local WeaponLOC = VTab1:AddToggle('Weapon', {
    Text = 'Weapon',
    Default = false, 
    Tooltip = 'Show players weapons', 

    Callback = function(Value)
        local function applyItemESP(itemName)
            local function createESP(item, itemName)
               local a = Instance.new("BillboardGui", item)
               a.Name = "ItemESP"
               a.Size = UDim2.new(0, 100, 0, 20)  -- Adjust the size to fit the text comfortably
               a.AlwaysOnTop = true
               a.StudsOffset = Vector3.new(5, 5, 0)  -- Adjust the Y offset to move the ESP higher
         
               local b = Instance.new("Frame", a)
               b.Size = UDim2.new(1, 0, 1, 0)
               b.BackgroundTransparency = 1  -- Adjust transparency for a softer look
               b.BackgroundColor3 = Color3.new(0, 0.5, 0)  -- Dark green color
         
               local c = Instance.new('TextLabel', b)
               c.Size = UDim2.new(1, 0, 1, 0)
               c.BackgroundTransparency = 1
               c.TextSize = 20  -- Slightly smaller text size
               c.Font = Enum.Font.Arial  -- Apply Gotham font
               c.TextColor3 = WepsColor  -- White text color
               c.TextStrokeTransparency = 0.5
               c.TextStrokeColor3 = Color3.new(0, 0, 0)  -- Black text stroke
               c.Text = itemName
            end
         
            for _, v in pairs(game.workspace:GetDescendants()) do
               if v.Name == itemName then
                  createESP(v, itemName)
               end
            end
         
            game.workspace.DescendantAdded:Connect(function(item)
               if item.Name == itemName then
                  createESP(item, itemName)
               end
            end)
         end
         
         local itemsToApplyESP = {
            "Bow",
            "PipePistol",
            "Crossbow",
            "PipeSMG",
            "Blunderbuss",
            "USP9",
            "M4A1",
            "SteelHammer",
            "StoneHammer",
            "Hammer",
            "SCAR",
            "IronHammer",
            "RPG",
            "PumpShotgun",
            "MiningDrill",
            "LeverActionRifle",
            "HMAR",
            "GaussRifle",
            "FlameThrower",
            "Crowbar"
         }
         
         for _, itemName in ipairs(itemsToApplyESP) do
            applyItemESP(itemName)
         end
    end
})


local DistanceLOC = VTab1:AddToggle('Distance', {
    Text = 'Distance',
    Default = false, 
    Tooltip = 'Show players distance', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")


function IsSleeping(Model)
    if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
        for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
            if v.Animation.AnimationId == "rbxassetid://13280887764" then
                return true
            end
        end
    end
    return false
end

function espDistance(drop)
    local dropesp = Drawing.new("Text")
    dropesp.Visible = false
    dropesp.Center = true
    dropesp.Outline = true
    dropesp.Font = 2
    dropesp.Size = 15

    local renderstepped
    renderstepped = runservice.RenderStepped:Connect(function()
        if drop and workspace:FindFirstChild(drop.Name) and drop:FindFirstChild("HumanoidRootPart") then
            local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)

            if drop_onscreen then
                local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                if distance <= distanceview then
                    if wallcheck then
                        -- Raycast to check for obstructions
                        local raycastParams = RaycastParams.new()
                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                        raycastParams.FilterDescendantsInstances = { drop }
                        local raycastResult = workspace:Raycast(
                            camera.CFrame.Position,
                            drop.HumanoidRootPart.Position - camera.CFrame.Position,
                            raycastParams
                        )

                        dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - -15) -- Adjusted position with a 15-pixel offset above
                        dropesp.Text = string.format("[ %.1f studs ]", distance)

                        -- Check if the player is sleeping and set the text color
                        if IsSleeping(drop) then
                            dropesp.Color = SleeperColor -- Green color for sleeping players
                        else
                            if not raycastResult then
                                if TeamCheck then
                                    -- Check for Dot
                                    local head = drop:FindFirstChild("Head")
                                    local dot = head and head:FindFirstChild("Dot")

                                    if dot and dot:IsA("BillboardGui") and dot.Enabled then
                                        dropesp.Color = TeamCheColor -- Yellow color for players with enabled Dot
                                    else
                                        dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                    end
                                else
                                    dropesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                end
                            else
                                dropesp.Color = WallColor -- Red color for obstructed players
                            end
                        end

                        dropesp.Visible = true
                    else
                        dropesp.Position = Vector2.new(drop_pos.X, drop_pos.Y - -15) -- Adjusted position with a 15-pixel offset above
                        dropesp.Text = string.format("[ %.1f studs ]", distance)

                        -- Check if the player is sleeping and set the text color
                        if IsSleeping(drop) then
                            dropesp.Color = SleeperColor -- Green color for sleeping players
                        else
                            dropesp.Color = ArmorColor -- Default color for awake players
                        end

                        dropesp.Visible = true
                    end
                else
                    dropesp.Visible = false
                end
            else
                dropesp.Visible = false
            end
        else
            dropesp.Visible = false
            dropesp:Remove()
            renderstepped:Disconnect()
        end
    end)
end

for i, drop in ipairs(workspace:GetChildren()) do
    if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
        espDistance(drop)
    end
end

workspace.ChildAdded:Connect(function(drop)
    if drop.Name == "Model" and drop:FindFirstChild("HumanoidRootPart") then
        espDistance(drop)
    end
end)

    end
})



local LineLOC = VTab1:AddToggle('Snapline', {
    Text = 'Snapline',
    Default = false, 
    Tooltip = 'Adds snaplines on players', 

    Callback = function(Value)
        local camera = workspace.CurrentCamera
        local runservice = game:GetService("RunService")

        
        function IsSleeping(Model)
            if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
                for i, v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
                    if v.Animation.AnimationId == "rbxassetid://13280887764" then
                        return true
                    end
                end
            end
            return false
        end
        
        function esp(drop)
            local lineesp = Drawing.new("Line")
            lineesp.Visible = false
            lineesp.From = Vector2.new(0, 0)
            lineesp.To = Vector2.new(0, 0)
            lineesp.Thickness = 2
        
            local renderstepped
            renderstepped = runservice.RenderStepped:Connect(function()
                if drop and drop:IsDescendantOf(workspace) and drop:FindFirstChild("HumanoidRootPart") then
                    local drop_pos, drop_onscreen = camera:WorldToViewportPoint(drop.HumanoidRootPart.Position)
        
                    if drop_onscreen then
                        local distance = (camera.CFrame.Position - drop.HumanoidRootPart.Position).Magnitude
                        if distance <= distanceview then
                            if wallcheck then
                                -- Raycast to check for obstructions
                                local raycastParams = RaycastParams.new()
                                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                raycastParams.FilterDescendantsInstances = { drop }
                                local raycastResult = workspace:Raycast(
                                    camera.CFrame.Position,
                                    drop.HumanoidRootPart.Position - camera.CFrame.Position,
                                    raycastParams
                                )
        
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    if not raycastResult then
                                        if TeamCheck then
                                            -- Check for Dot
                                            local head = drop:FindFirstChild("Head")
                                            local dot = head and head:FindFirstChild("Dot")
        
                                            if dot and dot:IsA("BillboardGui") and dot.Enabled then
                                                lineesp.Color = TeamCheColor -- Yellow color for players with enabled Dot
                                            else
                                                lineesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                            end
                                        else
                                            lineesp.Color = ArmorColor -- Green color for unobstructed and awake players
                                        end
                                    else
                                        lineesp.Color = WallColor -- Red color for obstructed players
                                    end
                                end
                            else
                                local topCenter = Vector2.new(camera.ViewportSize.X / 2, 0)
                                lineesp.From = topCenter
                                lineesp.To = Vector2.new(drop_pos.X, drop_pos.Y - 15)
                                lineesp.Visible = true
        
                                -- Check if the player is sleeping and set the line color
                                if IsSleeping(drop) then
                                    lineesp.Color = SleeperColor -- White color for sleeping players
                                else
                                    lineesp.Color = ArmorColor -- Default color for awake players
                                end
                            end
                        else
                            lineesp.Visible = false
                        end
                    else
                        lineesp.Visible = false
                    end
                else
                    lineesp.Visible = false
                    lineesp:Remove()
                    renderstepped:Disconnect()
                end
            end)
        end
        
        for _, drop in ipairs(workspace:GetDescendants()) do
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end
        
        workspace.DescendantAdded:Connect(function(drop)
            if drop:IsA("Model") and drop:FindFirstChild("HumanoidRootPart") then
                esp(drop)
            end
        end)
        
    end
})



local VTab2 = TabBox2:AddTab('Settings')

local WallCheckLOC = VTab2:AddToggle('Wallcheck', {
    Text = 'Wallcheck',
    Default = false, 
    Tooltip = 'Enable Wallcheck', 

    Callback = function(BRUHLOL)
        wallcheck = BRUHLOL
    end
})

WallCheckLOC:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 0, 0), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(WALLCOLTOG)
        WallColor = Color3.new(WALLCOLTOG.r, WALLCOLTOG.g, WALLCOLTOG.b)
    end
})

local TeamCheckLOC = VTab2:AddToggle('BRUHcheck', {
    Text = 'Teamcheck',
    Default = false, 
    Tooltip = 'Enable Teamcheck', 

    Callback = function(LOLBRUH)
        TeamCheck = LOLBRUH
    end
})

TeamCheckLOC:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 0), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(TeamCOLTOG)
        TeamCheColor = Color3.new(TeamCOLTOG.r, TeamCOLTOG.g, TeamCOLTOG.b)
    end
})

VTab2:AddLabel('Awake/Default'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0), 
    Title = 'ColorPicker', 
    Transparency = 0, 

    Callback = function(ColorTOG)
        ArmorColor = Color3.new(ColorTOG.r, ColorTOG.g, ColorTOG.b)
    end
})

VTab2:AddLabel('Sleepers'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 0, 1), 
    Title = 'ColorPicker', 
    Transparency = 0,

    Callback = function(SleeperTOG)
        SleeperColor = Color3.new(SleeperTOG.r, SleeperTOG.g, SleeperTOG.b)
    end
})


VTab2:AddLabel('Weapons'):AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'ColorPicker', 
    Transparency = 0,

    Callback = function(WeaponTOG)
        WepsColor = Color3.new(WeaponTOG.r, WeaponTOG.g, WeaponTOG.b)
    end
})


VTab2:AddSlider('ViewDistanceESP', {
    Text = 'ViewDistance',
    Default = 800,
    Min = 100,
    Max = 2000,
    Rounding = 0,
    Compact = false,

    Callback = function(distanceOP)
        distanceview = distanceOP
    end
})

VTab2:AddInput('TextBoxPlayers', {
    Default = 'Player',
    Numeric = false, 
    Finished = true, 

    Text = 'Custom "Player" text',
    Tooltip = 'Customize "Player" text', 

    Placeholder = 'Text here', 
   

    Callback = function(TEXTVALUE)
        PlayerText = '' .. TEXTVALUE .. ''
    end
})



local TabBox3 = Tabs.Main:AddRightTabbox() 


local VWTab1 = TabBox3:AddTab('World Visuals')

local IronESP = VWTab1:AddToggle('IronOre', {
    Text = 'Iron Ore',
    Default = false, 
    Tooltip = 'Shows Iron ore esp', 

    Callback = function(Value)
        IronToggleAdornments()
    end
})

IronESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(IronTOG)
        IronColor = Color3.new(IronTOG.r, IronTOG.g, IronTOG.b)
    end
})


local StoneESP = VWTab1:AddToggle('StoneOre', {
    Text = 'Stone Ore',
    Default = false, 
    Tooltip = 'Shows Stone ore esp', 

    Callback = function(Value)
        StonetoggleAdornments()
    end
})

StoneESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(StoneTOG)
        StoneColor = Color3.new(StoneTOG.r, StoneTOG.g, StoneTOG.b)
    end
})


local NitrateESP = VWTab1:AddToggle('NitrateOre', {
    Text = 'Nitrate Ore',
    Default = false, 
    Tooltip = 'Shows Nitrate ore esp', 

    Callback = function(Value)
        NitratetoggleAdornments()
    end
})

NitrateESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(NitrateTOG)
        NitrateColor = Color3.new(NitrateTOG.r, NitrateTOG.g, NitrateTOG.b)
    end
})


VWTab1:AddDivider()

local PartBoxESP = VWTab1:AddToggle('PartBox', {
    Text = 'Part Box',
    Default = false, 
    Tooltip = 'Shows Partbox esp', 

    Callback = function(Value)
        PartBoxtoggleAdornments()
    end
})

PartBoxESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(PartBoxTOG)
        PartBoxColor = PartBoxTOG
    end
})


local MilitaryCrateESP = VWTab1:AddToggle('MilitaryCrate', {
    Text = 'Metal Crate',
    Default = false, 
    Tooltip = 'Shows Metalcrate esp', 

    Callback = function(Value)
        MetalCratetoggleAdornments()
    end
})

MilitaryCrateESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(MetalCrateTOG)
        MetalCrateColor = MetalCrateTOG
    end
})


local VendingMachineESP = VWTab1:AddToggle('VendingMachine', {
    Text = 'Vending Machine',
    Default = false, 
    Tooltip = 'Shows VendingMachine esp', 

    Callback = function(Value)
        VendingMachinetoggleAdornments()
    end
})

VendingMachineESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(VendingMachineTOG)
        VendingMachineColor = VendingMachineTOG
    end
})

VWTab1:AddDivider()

local ClaimTotemESP = VWTab1:AddToggle('ClaimTotem', {
    Text = 'Claim Totem',
    Default = false, 
    Tooltip = 'Shows ClaimTotem esp', 

    Callback = function(Value)
        ClaimTotemtoggleAdornments()
    end
})

ClaimTotemESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(ClaimTotemTOG)
        ClaimTotemColor = ClaimTotemTOG
    end
})



local RespawnESP = VWTab1:AddToggle('Respawn', {
    Text = 'Respawn Totem',
    Default = false, 
    Tooltip = 'Shows Respawn totems esp', 

    Callback = function(Value)
        RespawnTotemtoggleAdornments()
    end
})

RespawnESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(RespawnTotemTOG)
        RespawnTotemColor = RespawnTotemTOG
    end
})


local CabinetESP = VWTab1:AddToggle('Cabinet', {
    Text = 'Cabinet',
    Default = false, 
    Tooltip = 'Shows Cabinet esp', 

    Callback = function(Value)
        CabinettoggleAdornments()
    end
})

CabinetESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(CabinetTOG)
        CabinetColor = CabinetTOG
    end
})



local SmallLargeBoxESP = VWTab1:AddToggle('SmallBox', {
    Text = 'Small Box',
    Default = false, 
    Tooltip = 'Shows Small Box esp', 

    Callback = function(Value)
        SmallBoxtoggleAdornments()
    end
})

SmallLargeBoxESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(SmallBoxTOG)
        SmallBoxColor = SmallBoxTOG
    end
})


local SmallLargeBoxESP = VWTab1:AddToggle('LargeBox', {
    Text = 'Medium Box',
    Default = false, 
    Tooltip = 'Shows Medium Box esp', 

    Callback = function(Value)
        MediumBoxtoggleAdornments()
    end
})

SmallLargeBoxESP:AddColorPicker('ColorPicker', {
    Default = Color3.new(1, 1, 1), 
    Title = 'Colorpicker', 
    Transparency = 0, 

    Callback = function(LargeBoxTOG)
        MediumBoxColor = LargeBoxTOG
    end
})




local VWTab2 = TabBox3:AddTab('Settings')

VWTab2:AddSlider('ViewDistanceESP', {
    Text = 'ViewDistance',
    Default = 500,
    Min = 100,
    Max = 1000,
    Rounding = 0,
    Compact = false,

    Callback = function(BLUR)
        maxDistance = BLUR
    end
})










local Tabs = {
    Main = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('UI Settings'),

}

local TabBox5 = Tabs.Main:AddLeftTabbox() 

-----------<WMisc LOCALS>

local LightingEnabled = true
local RemoveCloudsToggle = false
local GrassRemove = false
local LeavesON = false 

-----------<WMisc LOCALS>



local MTab1 = TabBox5:AddTab('World Misc')

MTab1:AddToggle('NoGrass', {
    Text = 'No Grass',
    Default = false, 
    Tooltip = 'Remove all grass', 

    Callback = function(RGRASS)
        GrassRemove = RGRASS

        if LightingEnabled and GrassRemove == true then
            sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
            elseif LightingEnabled and GrassRemove == false then
            sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
            end
    end
})

MTab1:AddToggle('NoTrees', {
    Text = 'No Leaves',
    Default = false, 
    Tooltip = 'Remove all tree leaves', 

    Callback = function(LEVESONE)
        LeavesON = LEVESONE 

local originalSizes = {} -- Store the original sizes of the items

local function storeOriginalSize(item)
    if not originalSizes[item] then
        originalSizes[item] = item.Size -- Store the original size if it hasn't been stored yet
    end
end

local function applyItemTransformation(itemName)
    for _, v in pairs(game.workspace:GetDescendants()) do
        if v.Name == itemName then
            if LeavesON then
                storeOriginalSize(v)
                v.Size = Vector3.new(0, 0, 0) -- Set size to (0, 0, 0) when LeavesON is true
            else
                if originalSizes[v] then
                    v.Size = originalSizes[v] -- Restore the original size when LeavesON is false
                end
            end
        end
    end

    game.workspace.DescendantAdded:Connect(function(item)
        if item.Name == itemName then
            if LeavesON then
                item.Size = Vector3.new(0, 0, 0) -- Set size to (0, 0, 0) for newly added items when LeavesON is true
                storeOriginalSize(item)
            elseif originalSizes[item] then
                item.Size = originalSizes[item] -- Restore the original size for newly added items when LeavesON is false
            end
        end
    end)
end

local itemsToApplyTransformation = {
    "Elm1_Leaves",
    "Birch1_Leaves",
    "Fir3_Leaves",
    "Palm1_Leaves"
}

for _, itemName in ipairs(itemsToApplyTransformation) do
    applyItemTransformation(itemName)
end

    end
})

MTab1:AddToggle('NoClouds', {
    Text = 'No Clouds',
    Default = false, 
    Tooltip = 'Remove all clouds', 

    Callback = function(RCLOUDS)
        RemoveCloudsToggle = RCLOUDS

        if LightingEnabled and RemoveCloudsToggle == true then
            sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
            elseif LightingEnabled and RemoveCloudsToggle == false then
            sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
            end
    end
})

MTab1:AddDivider()


local lighting = game:GetService("Lighting")
local skybox_assets = loadstring(game:HttpGet("https://pastebin.com/raw/rMzWpamQ", true))()
local Sky = Instance.new("Sky",game:GetService("Lighting"))

MTab1:AddDropdown('World_Skybox', {Values = { 'Default', 'Neptune', 'Among Us', 'Nebula', 'Vaporwave', 'Clouds', 'Twilight', 'DaBaby', 'Minecraft', 'Chill', 'Redshift', 'Blue Stars', 'Blue Aurora', 'Aesthetic Night' },Default = 1,Multi = false,Text = 'Custom Skybox:',Tooltip = 'Change Sky Theme',}):OnChanged(function(World_Skybox)
lighting.Sky.SkyboxBk = skybox_assets[World_Skybox].SkyboxBk
lighting.Sky.SkyboxDn = skybox_assets[World_Skybox].SkyboxDn
lighting.Sky.SkyboxFt = skybox_assets[World_Skybox].SkyboxFt
lighting.Sky.SkyboxLf = skybox_assets[World_Skybox].SkyboxLf
lighting.Sky.SkyboxRt = skybox_assets[World_Skybox].SkyboxRt
lighting.Sky.SkyboxUp = skybox_assets[World_Skybox].SkyboxUp
end)




local TabBox10 = Tabs.Main:AddRightTabbox() 


local MC30Tab1 = TabBox10:AddTab('Local Misc')

MC30Tab1:AddButton('Freecam', function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/RobloxSkriptr/RBLXSkriptr/main/Free%20Camera.lua",true))()
end)


MC30Tab1:AddDivider()

local longneck = {
    LongNeckEnabled = false,
    UpperLimitDefault = 3,
    LowerLimitDefault = 1.75,
    CurrentSliderValue = 1.75,
    }
    
    MC30Tab1:AddToggle('LongNeck', {Text = 'LongNeck', Default = false, Tooltip}):AddKeyPicker('LongNeckKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'Long Neck', NoUI = false}):OnChanged(function(value)
    longneck.LongNeckEnabled = value
    if not longneck.LongNeckEnabled then
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.UpperLimitDefault
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.LowerLimitDefault
    else
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.CurrentSliderValue
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.CurrentSliderValue
    end
    end)
    
    MC30Tab1:AddSlider('HeightChangerSlider', {Text = 'Height', Suffix = "", Default = 7, Min = 1, Max = 8.5; Rounding = 1, Compact = false}):OnChanged(function(Value)
    longneck.CurrentSliderValue = Value
    if longneck.LongNeckEnabled then
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = Value
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = Value
    end
    end)












local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'Insert', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind 


ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)


SaveManager:IgnoreThemeSettings()


SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })


ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')


SaveManager:BuildConfigSection(Tabs['UI Settings'])


ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()
